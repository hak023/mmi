import sys
import time
import re
from struct import *
from collections import namedtuple
import socket
from mmi.cmd import *

from binascii import unhexlify

# connection states
_CS_IDLE = 'Idle'
_CS_REQ_STARTED = 'Request-started'
_CS_REQ_SENT = 'Request-sent'

IBCF_COMMAND_RESULT_SUCCESS = 0
IBCF_COMMAND_RESULT_FAILURE = -1

######################################################################################

STACK_PROC_CS   = 0
STACK_PROC_PCDS = 1
STACK_PROC_LM   = 2
STACK_PROC_OMP  = 3

SVC_MSG_MAGIC_COOKIE  = 0x9D1FC7B8

DEF_PDE_STACK_BASE   = 0x10000000
DEF_CS_STACK_BASE    = 0x20000000
DEF_EMP_STACK_BASE   = 0x30000000
DEF_SLB_STACK_BASE   = 0x40000000
DEF_VLM_STACK_BASE   = 0x50000000
DEF_VNODE_STACK_BASE = 0x60000000

DEF_REQ_MSG_BASE  = 0x01000000
DEF_RSP_MSG_BASE  = 0x02000000
DEF_IND_MSG_BASE  = 0x03000000

# Local Node
DEF_CS_DIS_LN_REQ  = 0x1001
DEF_CS_DIS_LN_RSP  = 0x1001
DEF_CS_ADD_LN_REQ  = 0x1002
DEF_CS_ADD_LN_RSP  = 0x1002
DEF_CS_DEL_LN_REQ  = 0x1003
DEF_CS_DEL_LN_RSP  = 0x1003
DEF_CS_CHG_LN_REQ  = 0x1004
DEF_CS_CHG_LN_RSP  = 0x1004

DEF_STYPE_CS_DIS_LN_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_LN_REQ
DEF_STYPE_CS_DIS_LN_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_LN_RSP
DEF_STYPE_CS_ADD_LN_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_LN_REQ
DEF_STYPE_CS_ADD_LN_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_LN_RSP
DEF_STYPE_CS_DEL_LN_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_LN_REQ
DEF_STYPE_CS_DEL_LN_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_LN_RSP
DEF_STYPE_CS_CHG_LN_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_LN_REQ
DEF_STYPE_CS_CHG_LN_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_LN_RSP

# Remote Node
DEF_CS_DIS_RMT_REQ = 0x1011
DEF_CS_DIS_RMT_RSP = 0x1011
DEF_CS_ADD_RMT_REQ = 0x1012
DEF_CS_ADD_RMT_RSP = 0x1012
DEF_CS_DEL_RMT_REQ = 0x1013
DEF_CS_DEL_RMT_RSP = 0x1013
DEF_CS_CHG_RMT_REQ = 0x1014
DEF_CS_CHG_RMT_RSP = 0x1014

DEF_STYPE_CS_DIS_RMT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_RMT_REQ
DEF_STYPE_CS_DIS_RMT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_RMT_RSP
DEF_STYPE_CS_ADD_RMT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_RMT_REQ
DEF_STYPE_CS_ADD_RMT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_RMT_RSP
DEF_STYPE_CS_DEL_RMT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_RMT_REQ
DEF_STYPE_CS_DEL_RMT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_RMT_RSP
DEF_STYPE_CS_CHG_RMT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_RMT_REQ
DEF_STYPE_CS_CHG_RMT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_RMT_RSP

# Route
DEF_CS_DIS_RTE_REQ       = 0x1021
DEF_CS_DIS_RTE_RSP       = 0x1021
DEF_CS_ADD_RTE_REQ       = 0x1022
DEF_CS_ADD_RTE_RSP       = 0x1022
DEF_CS_DEL_RTE_REQ       = 0x1023
DEF_CS_DEL_RTE_RSP       = 0x1023
DEF_CS_CHG_RTE_REQ       = 0x1024
DEF_CS_CHG_RTE_RSP       = 0x1024
DEF_CS_ALL_ACT_RTE_REQ   = 0x1025
DEF_CS_ALL_ACT_RTE_RSP   = 0x1025
DEF_CS_ALL_DEACT_RTE_REQ = 0x1026
DEF_CS_ALL_DEACT_RTE_RSP = 0x1026

DEF_STYPE_CS_DIS_RTE_REQ       = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_RTE_REQ
DEF_STYPE_CS_DIS_RTE_RSP       = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_RTE_RSP
DEF_STYPE_CS_ADD_RTE_REQ       = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_RTE_REQ
DEF_STYPE_CS_ADD_RTE_RSP       = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_RTE_RSP
DEF_STYPE_CS_DEL_RTE_REQ       = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_RTE_REQ
DEF_STYPE_CS_DEL_RTE_RSP       = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_RTE_RSP
DEF_STYPE_CS_CHG_RTE_REQ       = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_RTE_REQ
DEF_STYPE_CS_CHG_RTE_RSP       = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_RTE_RSP
DEF_STYPE_CS_ALL_ACT_RTE_REQ   = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ALL_ACT_RTE_REQ
DEF_STYPE_CS_ALL_ACT_RTE_RSP   = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ALL_ACT_RTE_RSP
DEF_STYPE_CS_ALL_DEACT_RTE_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ALL_DEACT_RTE_REQ
DEF_STYPE_CS_ALL_DEACT_RTE_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ALL_DEACT_RTE_RSP

# Route Sequnce
DEF_CS_DIS_RSQ_REQ = 0x1031
DEF_CS_DIS_RSQ_RSP = 0x1031
DEF_CS_ADD_RSQ_REQ = 0x1032
DEF_CS_ADD_RSQ_RSP = 0x1032
DEF_CS_DEL_RSQ_REQ = 0x1033
DEF_CS_DEL_RSQ_RSP = 0x1033
DEF_CS_CHG_RSQ_REQ = 0x1034
DEF_CS_CHG_RSQ_RSP = 0x1034

DEF_STYPE_CS_DIS_RSQ_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_RSQ_REQ
DEF_STYPE_CS_DIS_RSQ_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_RSQ_RSP
DEF_STYPE_CS_ADD_RSQ_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_RSQ_REQ
DEF_STYPE_CS_ADD_RSQ_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_RSQ_RSP
DEF_STYPE_CS_DEL_RSQ_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_RSQ_REQ
DEF_STYPE_CS_DEL_RSQ_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_RSQ_RSP
DEF_STYPE_CS_CHG_RSQ_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_RSQ_REQ
DEF_STYPE_CS_CHG_RSQ_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_RSQ_RSP

# Special Route Sequnce
DEF_CS_DIS_SRSQ_REQ = 0x1041
DEF_CS_DIS_SRSQ_RSP = 0x1041
DEF_CS_ADD_SRSQ_REQ = 0x1042
DEF_CS_ADD_SRSQ_RSP = 0x1042
DEF_CS_DEL_SRSQ_REQ = 0x1043
DEF_CS_DEL_SRSQ_RSP = 0x1043
DEF_CS_CHG_SRSQ_REQ = 0x1044
DEF_CS_CHG_SRSQ_RSP = 0x1044

DEF_STYPE_CS_DIS_SRSQ_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_SRSQ_REQ
DEF_STYPE_CS_DIS_SRSQ_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_SRSQ_RSP
DEF_STYPE_CS_ADD_SRSQ_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_SRSQ_REQ
DEF_STYPE_CS_ADD_SRSQ_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_SRSQ_RSP
DEF_STYPE_CS_DEL_SRSQ_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_SRSQ_REQ
DEF_STYPE_CS_DEL_SRSQ_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_SRSQ_RSP
DEF_STYPE_CS_CHG_SRSQ_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_SRSQ_REQ
DEF_STYPE_CS_CHG_SRSQ_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_SRSQ_RSP

# Rule
DEF_CS_DIS_RULE_REQ = 0x1051
DEF_CS_DIS_RULE_RSP = 0x1051
DEF_CS_ADD_RULE_REQ = 0x1052
DEF_CS_ADD_RULE_RSP = 0x1052
DEF_CS_DEL_RULE_REQ = 0x1053
DEF_CS_DEL_RULE_RSP = 0x1053
DEF_CS_CHG_RULE_REQ = 0x1054
DEF_CS_CHG_RULE_RSP = 0x1054

DEF_STYPE_CS_DIS_RULE_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_RULE_REQ
DEF_STYPE_CS_DIS_RULE_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_RULE_RSP
DEF_STYPE_CS_ADD_RULE_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_RULE_REQ
DEF_STYPE_CS_ADD_RULE_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_RULE_RSP
DEF_STYPE_CS_DEL_RULE_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_RULE_REQ
DEF_STYPE_CS_DEL_RULE_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_RULE_RSP
DEF_STYPE_CS_CHG_RULE_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_RULE_REQ
DEF_STYPE_CS_CHG_RULE_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_RULE_RSP

# Screen Operation
DEF_CS_DIS_SCR_OP_REQ = 0x1061
DEF_CS_DIS_SCR_OP_RSP = 0x1061
DEF_CS_ADD_SCR_OP_REQ = 0x1062
DEF_CS_ADD_SCR_OP_RSP = 0x1062
DEF_CS_DEL_SCR_OP_REQ = 0x1063
DEF_CS_DEL_SCR_OP_RSP = 0x1063
DEF_CS_CHG_SCR_OP_REQ = 0x1064
DEF_CS_CHG_SCR_OP_RSP = 0x1064

DEF_STYPE_CS_DIS_SCR_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_SCR_OP_REQ
DEF_STYPE_CS_DIS_SCR_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_SCR_OP_RSP
DEF_STYPE_CS_ADD_SCR_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_SCR_OP_REQ
DEF_STYPE_CS_ADD_SCR_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_SCR_OP_RSP
DEF_STYPE_CS_DEL_SCR_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_SCR_OP_REQ
DEF_STYPE_CS_DEL_SCR_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_SCR_OP_RSP
DEF_STYPE_CS_CHG_SCR_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_SCR_OP_REQ
DEF_STYPE_CS_CHG_SCR_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_SCR_OP_RSP

# Screen Operation SET          
DEF_CS_DIS_SCR_OPS_REQ = 0x1071
DEF_CS_DIS_SCR_OPS_RSP = 0x1071
DEF_CS_ADD_SCR_OPS_REQ = 0x1072
DEF_CS_ADD_SCR_OPS_RSP = 0x1072
DEF_CS_DEL_SCR_OPS_REQ = 0x1073
DEF_CS_DEL_SCR_OPS_RSP = 0x1073
DEF_CS_CHG_SCR_OPS_REQ = 0x1074
DEF_CS_CHG_SCR_OPS_RSP = 0x1074

DEF_STYPE_CS_DIS_SCR_OPS_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_SCR_OPS_REQ
DEF_STYPE_CS_DIS_SCR_OPS_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_SCR_OPS_RSP
DEF_STYPE_CS_ADD_SCR_OPS_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_SCR_OPS_REQ
DEF_STYPE_CS_ADD_SCR_OPS_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_SCR_OPS_RSP
DEF_STYPE_CS_DEL_SCR_OPS_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_SCR_OPS_REQ
DEF_STYPE_CS_DEL_SCR_OPS_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_SCR_OPS_RSP
DEF_STYPE_CS_CHG_SCR_OPS_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_SCR_OPS_REQ
DEF_STYPE_CS_CHG_SCR_OPS_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_SCR_OPS_RSP

#Screen Action                                                                                     
DEF_CS_DIS_SCR_ACT_REQ = 0x1081
DEF_CS_DIS_SCR_ACT_RSP = 0x1081
DEF_CS_ADD_SCR_ACT_REQ = 0x1082
DEF_CS_ADD_SCR_ACT_RSP = 0x1082
DEF_CS_DEL_SCR_ACT_REQ = 0x1083
DEF_CS_DEL_SCR_ACT_RSP = 0x1083
DEF_CS_CHG_SCR_ACT_REQ = 0x1084
DEF_CS_CHG_SCR_ACT_RSP = 0x1084

DEF_STYPE_CS_DIS_SCR_ACT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_SCR_ACT_REQ
DEF_STYPE_CS_DIS_SCR_ACT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_SCR_ACT_RSP
DEF_STYPE_CS_ADD_SCR_ACT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_SCR_ACT_REQ
DEF_STYPE_CS_ADD_SCR_ACT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_SCR_ACT_RSP
DEF_STYPE_CS_DEL_SCR_ACT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_SCR_ACT_REQ
DEF_STYPE_CS_DEL_SCR_ACT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_SCR_ACT_RSP
DEF_STYPE_CS_CHG_SCR_ACT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_SCR_ACT_REQ
DEF_STYPE_CS_CHG_SCR_ACT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_SCR_ACT_RSP
                                                                                        
# Filter Operation                                                                        
DEF_CS_DIS_FT_OP_REQ = 0x1091                                                       
DEF_CS_DIS_FT_OP_RSP = 0x1091
DEF_CS_ADD_FT_OP_REQ = 0x1092
DEF_CS_ADD_FT_OP_RSP = 0x1092
DEF_CS_DEL_FT_OP_REQ = 0x1093
DEF_CS_DEL_FT_OP_RSP = 0x1093
DEF_CS_CHG_FT_OP_REQ = 0x1094
DEF_CS_CHG_FT_OP_RSP = 0x1094

DEF_STYPE_CS_DIS_FT_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_FT_OP_REQ  
DEF_STYPE_CS_DIS_FT_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_FT_OP_RSP  
DEF_STYPE_CS_ADD_FT_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_FT_OP_REQ  
DEF_STYPE_CS_ADD_FT_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_FT_OP_RSP  
DEF_STYPE_CS_DEL_FT_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_FT_OP_REQ  
DEF_STYPE_CS_DEL_FT_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_FT_OP_RSP  
DEF_STYPE_CS_CHG_FT_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_FT_OP_REQ  
DEF_STYPE_CS_CHG_FT_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_FT_OP_RSP  
                                                                                          
# Filter Operation Set                                                                    
DEF_CS_DIS_FT_OPS_REQ = 0x1101
DEF_CS_DIS_FT_OPS_RSP = 0x1101
DEF_CS_ADD_FT_OPS_REQ = 0x1102
DEF_CS_ADD_FT_OPS_RSP = 0x1102
DEF_CS_DEL_FT_OPS_REQ = 0x1103
DEF_CS_DEL_FT_OPS_RSP = 0x1103
DEF_CS_CHG_FT_OPS_REQ = 0x1104
DEF_CS_CHG_FT_OPS_RSP = 0x1104

DEF_STYPE_CS_DIS_FT_OPS_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_FT_OPS_REQ
DEF_STYPE_CS_DIS_FT_OPS_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_FT_OPS_RSP
DEF_STYPE_CS_ADD_FT_OPS_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_FT_OPS_REQ
DEF_STYPE_CS_ADD_FT_OPS_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_FT_OPS_RSP
DEF_STYPE_CS_DEL_FT_OPS_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_FT_OPS_REQ
DEF_STYPE_CS_DEL_FT_OPS_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_FT_OPS_RSP
DEF_STYPE_CS_CHG_FT_OPS_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_FT_OPS_REQ
DEF_STYPE_CS_CHG_FT_OPS_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_FT_OPS_RSP
                                                                                          
# Filter Action                                                                           
DEF_CS_DIS_FT_ACT_REQ = 0x1111
DEF_CS_DIS_FT_ACT_RSP = 0x1111
DEF_CS_ADD_FT_ACT_REQ = 0x1112
DEF_CS_ADD_FT_ACT_RSP = 0x1112
DEF_CS_DEL_FT_ACT_REQ = 0x1113
DEF_CS_DEL_FT_ACT_RSP = 0x1113
DEF_CS_CHG_FT_ACT_REQ = 0x1114
DEF_CS_CHG_FT_ACT_RSP = 0x1114

DEF_STYPE_CS_DIS_FT_ACT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_FT_ACT_REQ
DEF_STYPE_CS_DIS_FT_ACT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_FT_ACT_RSP
DEF_STYPE_CS_ADD_FT_ACT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_FT_ACT_REQ
DEF_STYPE_CS_ADD_FT_ACT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_FT_ACT_RSP
DEF_STYPE_CS_DEL_FT_ACT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_FT_ACT_REQ
DEF_STYPE_CS_DEL_FT_ACT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_FT_ACT_RSP
DEF_STYPE_CS_CHG_FT_ACT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_FT_ACT_REQ
DEF_STYPE_CS_CHG_FT_ACT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_FT_ACT_RSP
                                                                                          
# Route Operation                                                                         
DEF_CS_DIS_RTE_OP_REQ = 0x1121
DEF_CS_DIS_RTE_OP_RSP = 0x1121
DEF_CS_ADD_RTE_OP_REQ = 0x1122
DEF_CS_ADD_RTE_OP_RSP = 0x1122
DEF_CS_DEL_RTE_OP_REQ = 0x1123
DEF_CS_DEL_RTE_OP_RSP = 0x1123
DEF_CS_CHG_RTE_OP_REQ = 0x1124
DEF_CS_CHG_RTE_OP_RSP = 0x1124
                                                   
DEF_STYPE_CS_DIS_RTE_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_RTE_OP_REQ
DEF_STYPE_CS_DIS_RTE_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_RTE_OP_RSP
DEF_STYPE_CS_ADD_RTE_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_RTE_OP_REQ
DEF_STYPE_CS_ADD_RTE_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_RTE_OP_RSP
DEF_STYPE_CS_DEL_RTE_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_RTE_OP_REQ
DEF_STYPE_CS_DEL_RTE_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_RTE_OP_RSP
DEF_STYPE_CS_CHG_RTE_OP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_RTE_OP_REQ
DEF_STYPE_CS_CHG_RTE_OP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_RTE_OP_RSP

# Route Group
DEF_CS_DIS_RTE_GRP_REQ       = 0x1131
DEF_CS_DIS_RTE_GRP_RSP       = 0x1131
DEF_CS_ADD_RTE_GRP_REQ       = 0x1132
DEF_CS_ADD_RTE_GRP_RSP       = 0x1132
DEF_CS_DEL_RTE_GRP_REQ       = 0x1133
DEF_CS_DEL_RTE_GRP_RSP       = 0x1133
DEF_CS_CHG_RTE_GRP_REQ       = 0x1134
DEF_CS_CHG_RTE_GRP_RSP       = 0x1134
DEF_CS_ALL_ACT_RTE_GRP_REQ   = 0x1135
DEF_CS_ALL_ACT_RTE_GRP_RSP   = 0x1135
DEF_CS_ALL_DEACT_RTE_GRP_REQ = 0x1136
DEF_CS_ALL_DEACT_RTE_GRP_RSP = 0x1136

DEF_STYPE_CS_DIS_RTE_GRP_REQ       = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_RTE_GRP_REQ
DEF_STYPE_CS_DIS_RTE_GRP_RSP       = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_RTE_GRP_RSP
DEF_STYPE_CS_ADD_RTE_GRP_REQ       = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_RTE_GRP_REQ
DEF_STYPE_CS_ADD_RTE_GRP_RSP       = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_RTE_GRP_RSP
DEF_STYPE_CS_DEL_RTE_GRP_REQ       = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_RTE_GRP_REQ
DEF_STYPE_CS_DEL_RTE_GRP_RSP       = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_RTE_GRP_RSP
DEF_STYPE_CS_CHG_RTE_GRP_REQ       = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_RTE_GRP_REQ
DEF_STYPE_CS_CHG_RTE_GRP_RSP       = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_RTE_GRP_RSP
DEF_STYPE_CS_ALL_ACT_RTE_GRP_REQ   = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ALL_ACT_RTE_GRP_REQ
DEF_STYPE_CS_ALL_ACT_RTE_GRP_RSP   = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ALL_ACT_RTE_GRP_RSP
DEF_STYPE_CS_ALL_DEACT_RTE_GRP_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ALL_DEACT_RTE_GRP_REQ
DEF_STYPE_CS_ALL_DEACT_RTE_GRP_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ALL_DEACT_RTE_GRP_RSP

# TrGW
DEF_CS_DIS_TRGW_REQ = 0x1141
DEF_CS_DIS_TRGW_RSP = 0x1141
DEF_CS_ADD_TRGW_REQ = 0x1142
DEF_CS_ADD_TRGW_RSP = 0x1142
DEF_CS_DEL_TRGW_REQ = 0x1143
DEF_CS_DEL_TRGW_RSP = 0x1143
DEF_CS_CHG_TRGW_REQ = 0x1144
DEF_CS_CHG_TRGW_RSP = 0x1144

DEF_STYPE_CS_DIS_TRGW_REQ    = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_TRGW_REQ
DEF_STYPE_CS_DIS_TRGW_RSP    = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_TRGW_RSP
DEF_STYPE_CS_ADD_TRGW_REQ    = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_TRGW_REQ
DEF_STYPE_CS_ADD_TRGW_RSP    = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_TRGW_RSP
DEF_STYPE_CS_DEL_TRGW_REQ    = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_TRGW_REQ
DEF_STYPE_CS_DEL_TRGW_RSP    = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_TRGW_RSP
DEF_STYPE_CS_CHG_TRGW_REQ    = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_TRGW_REQ
DEF_STYPE_CS_CHG_TRGW_RSP    = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_TRGW_RSP

# ReasonCode
DEF_CS_DIS_RC_REQ = 0x1151
DEF_CS_DIS_RC_RSP = 0x1151
DEF_CS_ADD_RC_REQ = 0x1152
DEF_CS_ADD_RC_RSP = 0x1152
DEF_CS_DEL_RC_REQ = 0x1153
DEF_CS_DEL_RC_RSP = 0x1153
DEF_CS_CHG_RC_REQ = 0x1154
DEF_CS_CHG_RC_RSP = 0x1154

DEF_STYPE_CS_DIS_RC_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_RC_REQ
DEF_STYPE_CS_DIS_RC_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_RC_RSP
DEF_STYPE_CS_ADD_RC_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_RC_REQ
DEF_STYPE_CS_ADD_RC_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_RC_RSP
DEF_STYPE_CS_DEL_RC_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_RC_REQ
DEF_STYPE_CS_DEL_RC_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_RC_RSP
DEF_STYPE_CS_CHG_RC_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_RC_REQ
DEF_STYPE_CS_CHG_RC_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_RC_RSP

# sip env - overload 
DEF_CS_DIS_ENV_REQ         = 0x1161
DEF_CS_DIS_ENV_RSP         = 0x1161
DEF_CS_CHG_ENV_REQ         = 0x1164
DEF_CS_CHG_ENV_RSP         = 0x1164
DEF_STYPE_CS_DIS_ENV_REQ   = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_ENV_REQ
DEF_STYPE_CS_DIS_ENV_RSP   = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_ENV_RSP
DEF_STYPE_CS_CHG_ENV_REQ   = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_ENV_REQ
DEF_STYPE_CS_CHG_ENV_RSP   = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_ENV_RSP

# sip timer 
DEF_CS_DIS_TMR_REQ         = 0x1171
DEF_CS_DIS_TMR_RSP         = 0x1171
DEF_CS_CHG_TMR_REQ         = 0x1174
DEF_CS_CHG_TMR_RSP         = 0x1174
DEF_STYPE_CS_DIS_TMR_REQ   = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_TMR_REQ
DEF_STYPE_CS_DIS_TMR_RSP   = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_TMR_RSP
DEF_STYPE_CS_CHG_TMR_REQ   = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_TMR_REQ
DEF_STYPE_CS_CHG_TMR_RSP   = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_TMR_RSP

# EmergencyCall
DEF_CS_DIS_EC_REQ          = 0x1181
DEF_CS_DIS_EC_RSP          = 0x1181
DEF_CS_ADD_EC_REQ          = 0x1182
DEF_CS_ADD_EC_RSP          = 0x1182
DEF_CS_DEL_EC_REQ          = 0x1183
DEF_CS_DEL_EC_RSP          = 0x1183
DEF_CS_CHG_EC_REQ          = 0x1184
DEF_CS_CHG_EC_RSP          = 0x1184

DEF_STYPE_CS_DIS_EC_REQ    = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_EC_REQ
DEF_STYPE_CS_DIS_EC_RSP    = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_EC_RSP
DEF_STYPE_CS_CHG_EC_REQ    = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_EC_REQ
DEF_STYPE_CS_CHG_EC_RSP    = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_EC_RSP
DEF_STYPE_CS_ADD_EC_REQ    = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_ADD_EC_REQ
DEF_STYPE_CS_ADD_EC_RSP    = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_ADD_EC_RSP
DEF_STYPE_CS_DEL_EC_REQ    = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_EC_REQ
DEF_STYPE_CS_DEL_EC_RSP    = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_EC_RSP

# CM Hang
DEF_CS_DIS_HANG_REQ        = 0x1191
DEF_CS_DIS_HANG_RSP        = 0x1191
DEF_CS_CHG_HANG_REQ        = 0x1192
DEF_CS_CHG_HANG_RSP        = 0x1192

DEF_STYPE_CS_DIS_HANG_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_HANG_REQ
DEF_STYPE_CS_DIS_HANG_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_HANG_RSP
DEF_STYPE_CS_CHG_HANG_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_HANG_REQ
DEF_STYPE_CS_CHG_HANG_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_HANG_REQ

#Queue Monitoring
DEF_CS_DIS_CCM_ST_REQ       = 0x1201
DEF_CS_DIS_CCM_ST_RSP       = 0x1201

DEF_STYPE_CS_DIS_CCM_ST_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_CCM_ST_REQ
DEF_STYPE_CS_DIS_CCM_ST_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_CCM_ST_RSP

#############################################################################################################

#PDE(PCDS)
#Local
DEF_PDE_DIS_LN_REQ           = 0x0001
DEF_PDE_DIS_LN_RSP           = 0x0001
DEF_STYPE_PDE_DIS_LN_REQ     = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_DIS_LN_REQ
DEF_STYPE_PDE_DIS_LN_RSP     = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_DIS_LN_RSP

#Remote
DEF_PDE_DIS_RMT_REQ          = 0x0011
DEF_PDE_DIS_RMT_RSP          = 0x0011
DEF_PDE_ADD_RMT_REQ          = 0x0012
DEF_PDE_ADD_RMT_RSP          = 0x0012
DEF_PDE_DEL_RMT_REQ          = 0x0013
DEF_PDE_DEL_RMT_RSP          = 0x0013
DEF_PDE_CHG_RMT_REQ          = 0x0014
DEF_PDE_CHG_RMT_RSP          = 0x0014
DEF_STYPE_PDE_DIS_RMT_REQ    = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_DIS_RMT_REQ
DEF_STYPE_PDE_DIS_RMT_RSP    = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_DIS_RMT_RSP
DEF_STYPE_PDE_ADD_RMT_REQ    = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_ADD_RMT_REQ
DEF_STYPE_PDE_ADD_RMT_RSP    = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_ADD_RMT_RSP
DEF_STYPE_PDE_DEL_RMT_REQ    = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_DEL_RMT_REQ
DEF_STYPE_PDE_DEL_RMT_RSP    = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_DEL_RMT_RSP
DEF_STYPE_PDE_CHG_RMT_REQ    = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_CHG_RMT_REQ
DEF_STYPE_PDE_CHG_RMT_RSP    = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_CHG_RMT_RSP

#Route
DEF_PDE_DIS_RTE_REQ          = 0x0021
DEF_PDE_DIS_RTE_RSP          = 0x0021
DEF_PDE_ADD_RTE_REQ          = 0x0022
DEF_PDE_ADD_RTE_RSP          = 0x0022
DEF_PDE_DEL_RTE_REQ          = 0x0023
DEF_PDE_DEL_RTE_RSP          = 0x0023
DEF_PDE_CHG_RTE_REQ          = 0x0024
DEF_PDE_CHG_RTE_RSP          = 0x0024
DEF_STYPE_PDE_DIS_RTE_REQ    = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_DIS_RTE_REQ
DEF_STYPE_PDE_DIS_RTE_RSP    = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_DIS_RTE_RSP
DEF_STYPE_PDE_ADD_RTE_REQ    = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_ADD_RTE_REQ
DEF_STYPE_PDE_ADD_RTE_RSP    = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_ADD_RTE_RSP
DEF_STYPE_PDE_DEL_RTE_REQ    = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_DEL_RTE_REQ
DEF_STYPE_PDE_DEL_RTE_RSP    = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_DEL_RTE_RSP
DEF_STYPE_PDE_CHG_RTE_REQ    = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_CHG_RTE_REQ
DEF_STYPE_PDE_CHG_RTE_RSP    = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_CHG_RTE_RSP

#Session
DEF_PDE_DIS_SES_REQ            = 0x0031
DEF_PDE_DIS_SES_RSP            = 0x0031
DEF_PDE_CON_SES_REQ            = 0x0032
DEF_PDE_CON_SES_RSP            = 0x0032
DEF_PDE_ABORT_SES_REQ          = 0x0033
DEF_PDE_ABORT_SES_RSP          = 0x0033
DEF_PDE_SHUTDOWN_SES_REQ       = 0x0034
DEF_PDE_SHUTDOWN_SES_RSP       = 0x0034
DEF_STYPE_PDE_DIS_SES_REQ      = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_DIS_SES_REQ
DEF_STYPE_PDE_DIS_SES_RSP      = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_DIS_SES_RSP
DEF_STYPE_PDE_CON_SES_REQ      = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_CON_SES_REQ
DEF_STYPE_PDE_CON_SES_RSP      = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_CON_SES_RSP
DEF_STYPE_PDE_ABORT_SES_REQ    = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_ABORT_SES_REQ
DEF_STYPE_PDE_ABORT_SES_RSP    = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_ABORT_SES_RSP
DEF_STYPE_PDE_SHUTDOWN_SES_REQ = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_SHUTDOWN_SES_REQ
DEF_STYPE_PDE_SHUTDOWN_SES_RSP = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_SHUTDOWN_SES_RSP

#Timer
DEF_PDE_DIS_TIMER_REQ         = 0x0041
DEF_PDE_DIS_TIMER_RSP         = 0x0041
DEF_PDE_CHG_TIMER_REQ         = 0x0042
DEF_PDE_CHG_TIMER_RSP         = 0x0042
DEF_STYPE_PDE_DIS_TIMER_REQ   = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_DIS_TIMER_REQ
DEF_STYPE_PDE_DIS_TIMER_RSP   = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_DIS_TIMER_RSP
DEF_STYPE_PDE_CHG_TIMER_REQ   = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_CHG_TIMER_REQ
DEF_STYPE_PDE_CHG_TIMER_RSP   = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_CHG_TIMER_RSP

#Queue Monitoring
DEF_PDE_DIS_PCDS_ST_REQ       = 0x0043
DEF_PDE_DIS_PCDS_ST_RSP       = 0x0043

DEF_STYPE_PDE_DIS_PCDS_ST_REQ = DEF_PDE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_DIS_PCDS_ST_REQ
DEF_STYPE_PDE_DIS_PCDS_ST_RSP = DEF_PDE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_DIS_PCDS_ST_RSP

#############################################################################################################

# SDP CODEC LIST
DEF_EMP_ADD_SDP_CODEC_REQ  = 0x0421
DEF_EMP_ADD_SDP_CODEC_RSP  = 0x0422
DEF_EMP_DEL_SDP_CODEC_REQ  = 0x0423
DEF_EMP_DEL_SDP_CODEC_RSP  = 0x0424
DEF_EMP_CHG_SDP_CODEC_REQ  = 0x0425
DEF_EMP_CHG_SDP_CODEC_RSP  = 0x0426
DEF_EMP_DIS_SDP_CODEC_REQ  = 0x0427
DEF_EMP_DIS_SDP_CODEC_RSP  = 0x0428

DEF_STYPE_EMP_ADD_SDP_CODEC_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_ADD_SDP_CODEC_REQ
DEF_STYPE_EMP_ADD_SDP_CODEC_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_ADD_SDP_CODEC_RSP
DEF_STYPE_EMP_DEL_SDP_CODEC_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DEL_SDP_CODEC_REQ
DEF_STYPE_EMP_DEL_SDP_CODEC_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DEL_SDP_CODEC_RSP
DEF_STYPE_EMP_CHG_SDP_CODEC_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_CHG_SDP_CODEC_REQ
DEF_STYPE_EMP_CHG_SDP_CODEC_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_CHG_SDP_CODEC_RSP
DEF_STYPE_EMP_DIS_SDP_CODEC_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DIS_SDP_CODEC_REQ
DEF_STYPE_EMP_DIS_SDP_CODEC_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DIS_SDP_CODEC_RSP

# SDP Rule
DEF_EMP_ADD_SDP_RULE_REQ = 0x0431
DEF_EMP_ADD_SDP_RULE_RSP = 0x0432
DEF_EMP_DEL_SDP_RULE_REQ = 0x0433
DEF_EMP_DEL_SDP_RULE_RSP = 0x0434
DEF_EMP_CHG_SDP_RULE_REQ = 0x0435
DEF_EMP_CHG_SDP_RULE_RSP = 0x0436
DEF_EMP_DIS_SDP_RULE_REQ = 0x0437
DEF_EMP_DIS_SDP_RULE_RSP = 0x0438

DEF_STYPE_EMP_ADD_SDP_RULE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_ADD_SDP_RULE_REQ
DEF_STYPE_EMP_ADD_SDP_RULE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_ADD_SDP_RULE_RSP
DEF_STYPE_EMP_DEL_SDP_RULE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DEL_SDP_RULE_REQ
DEF_STYPE_EMP_DEL_SDP_RULE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DEL_SDP_RULE_RSP
DEF_STYPE_EMP_CHG_SDP_RULE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_CHG_SDP_RULE_REQ
DEF_STYPE_EMP_CHG_SDP_RULE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_CHG_SDP_RULE_RSP
DEF_STYPE_EMP_DIS_SDP_RULE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DIS_SDP_RULE_REQ
DEF_STYPE_EMP_DIS_SDP_RULE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DIS_SDP_RULE_RSP

# SDP Manipulation                                                                                               
DEF_EMP_ADD_SDP_MANIPULATION_REQ = 0x0441                                                                        
DEF_EMP_ADD_SDP_MANIPULATION_RSP = 0x0442                                                                        
DEF_EMP_DEL_SDP_MANIPULATION_REQ = 0x0443                                                                        
DEF_EMP_DEL_SDP_MANIPULATION_RSP = 0x0444                                                                        
DEF_EMP_CHG_SDP_MANIPULATION_REQ = 0x0445                                                                        
DEF_EMP_CHG_SDP_MANIPULATION_RSP = 0x0446                                                                        
DEF_EMP_DIS_SDP_MANIPULATION_REQ = 0x0447                                                                        
DEF_EMP_DIS_SDP_MANIPULATION_RSP = 0x0448                                                                        

DEF_STYPE_EMP_ADD_SDP_MANIPULATION_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_ADD_SDP_MANIPULATION_REQ
DEF_STYPE_EMP_ADD_SDP_MANIPULATION_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_ADD_SDP_MANIPULATION_RSP
DEF_STYPE_EMP_DEL_SDP_MANIPULATION_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DEL_SDP_MANIPULATION_REQ
DEF_STYPE_EMP_DEL_SDP_MANIPULATION_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DEL_SDP_MANIPULATION_RSP
DEF_STYPE_EMP_CHG_SDP_MANIPULATION_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_CHG_SDP_MANIPULATION_REQ
DEF_STYPE_EMP_CHG_SDP_MANIPULATION_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_CHG_SDP_MANIPULATION_RSP
DEF_STYPE_EMP_DIS_SDP_MANIPULATION_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DIS_SDP_MANIPULATION_REQ
DEF_STYPE_EMP_DIS_SDP_MANIPULATION_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DIS_SDP_MANIPULATION_RSP

# SDP UA Rule                                                                                                     
DEF_EMP_ADD_SDP_UA_RULE_REQ = 0x0451                                                                   
DEF_EMP_ADD_SDP_UA_RULE_RSP = 0x0452                                                                   
DEF_EMP_DEL_SDP_UA_RULE_REQ = 0x0453                                                                   
DEF_EMP_DEL_SDP_UA_RULE_RSP = 0x0454                                                                   
DEF_EMP_CHG_SDP_UA_RULE_REQ = 0x0455                                                                   
DEF_EMP_CHG_SDP_UA_RULE_RSP = 0x0456                                                                   
DEF_EMP_DIS_SDP_UA_RULE_REQ = 0x0457                                                                   
DEF_EMP_DIS_SDP_UA_RULE_RSP = 0x0458    
                                                               
DEF_STYPE_EMP_ADD_SDP_UA_RULE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_ADD_SDP_UA_RULE_REQ
DEF_STYPE_EMP_ADD_SDP_UA_RULE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_ADD_SDP_UA_RULE_RSP
DEF_STYPE_EMP_DEL_SDP_UA_RULE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DEL_SDP_UA_RULE_REQ
DEF_STYPE_EMP_DEL_SDP_UA_RULE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DEL_SDP_UA_RULE_RSP
DEF_STYPE_EMP_CHG_SDP_UA_RULE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_CHG_SDP_UA_RULE_REQ
DEF_STYPE_EMP_CHG_SDP_UA_RULE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_CHG_SDP_UA_RULE_RSP
DEF_STYPE_EMP_DIS_SDP_UA_RULE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DIS_SDP_UA_RULE_REQ
DEF_STYPE_EMP_DIS_SDP_UA_RULE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DIS_SDP_UA_RULE_RSP

# TG ROUTE
DEF_EMP_ADD_RTE_REQ = 0x0651
DEF_EMP_ADD_RTE_RSP = 0x0652
DEF_EMP_DEL_RTE_REQ = 0x0653
DEF_EMP_DEL_RTE_RSP = 0x0654
DEF_EMP_CHG_RTE_REQ = 0x0655
DEF_EMP_CHG_RTE_RSP = 0x0656
DEF_EMP_DIS_RTE_REQ = 0x0657
DEF_EMP_DIS_RTE_RSP = 0x0658

DEF_STYPE_EMP_ADD_RTE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_ADD_RTE_REQ
DEF_STYPE_EMP_ADD_RTE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_ADD_RTE_RSP
DEF_STYPE_EMP_DEL_RTE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DEL_RTE_REQ
DEF_STYPE_EMP_DEL_RTE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DEL_RTE_RSP
DEF_STYPE_EMP_CHG_RTE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_CHG_RTE_REQ
DEF_STYPE_EMP_CHG_RTE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_CHG_RTE_RSP
DEF_STYPE_EMP_DIS_RTE_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DIS_RTE_REQ
DEF_STYPE_EMP_DIS_RTE_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DIS_RTE_RSP

# TG Env
DEF_EMP_CHG_ENV_REQ = 0x0665
DEF_EMP_CHG_ENV_RSP = 0x0666
DEF_EMP_DIS_ENV_REQ = 0x0667
DEF_EMP_DIS_ENV_RSP = 0x0668

DEF_STYPE_EMP_CHG_ENV_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_CHG_ENV_REQ
DEF_STYPE_EMP_CHG_ENV_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_CHG_ENV_RSP
DEF_STYPE_EMP_DIS_ENV_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DIS_ENV_REQ
DEF_STYPE_EMP_DIS_ENV_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DIS_ENV_RSP

# SDP CODEC MANAGER
DEF_EMP_ADD_SDP_CODEC_MANAGER_REQ = 0x0461
DEF_EMP_ADD_SDP_CODEC_MANAGER_RSP = 0x0462
DEF_EMP_DEL_SDP_CODEC_MANAGER_REQ = 0x0463
DEF_EMP_DEL_SDP_CODEC_MANAGER_RSP = 0x0464
DEF_EMP_CHG_SDP_CODEC_MANAGER_REQ = 0x0465
DEF_EMP_CHG_SDP_CODEC_MANAGER_RSP = 0x0466
DEF_EMP_DIS_SDP_CODEC_MANAGER_REQ = 0x0467
DEF_EMP_DIS_SDP_CODEC_MANAGER_RSP = 0x0468

DEF_STYPE_EMP_ADD_SDP_CODEC_MANAGER_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_ADD_SDP_CODEC_MANAGER_REQ
DEF_STYPE_EMP_ADD_SDP_CODEC_MANAGER_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_ADD_SDP_CODEC_MANAGER_RSP
DEF_STYPE_EMP_DEL_SDP_CODEC_MANAGER_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DEL_SDP_CODEC_MANAGER_REQ
DEF_STYPE_EMP_DEL_SDP_CODEC_MANAGER_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DEL_SDP_CODEC_MANAGER_RSP
DEF_STYPE_EMP_CHG_SDP_CODEC_MANAGER_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_CHG_SDP_CODEC_MANAGER_REQ
DEF_STYPE_EMP_CHG_SDP_CODEC_MANAGER_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_CHG_SDP_CODEC_MANAGER_RSP
DEF_STYPE_EMP_DIS_SDP_CODEC_MANAGER_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DIS_SDP_CODEC_MANAGER_REQ
DEF_STYPE_EMP_DIS_SDP_CODEC_MANAGER_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DIS_SDP_CODEC_MANAGER_RSP

# SDP TRANSCODING
DEF_EMP_ADD_SDP_TRANSCODING_REQ = 0x0471
DEF_EMP_ADD_SDP_TRANSCODING_RSP = 0x0472
DEF_EMP_DEL_SDP_TRANSCODING_REQ = 0x0473
DEF_EMP_DEL_SDP_TRANSCODING_RSP = 0x0474
DEF_EMP_CHG_SDP_TRANSCODING_REQ = 0x0475
DEF_EMP_CHG_SDP_TRANSCODING_RSP = 0x0476
DEF_EMP_DIS_SDP_TRANSCODING_REQ = 0x0477
DEF_EMP_DIS_SDP_TRANSCODING_RSP = 0x0478

DEF_STYPE_EMP_ADD_SDP_TRANSCODING_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_ADD_SDP_TRANSCODING_REQ
DEF_STYPE_EMP_ADD_SDP_TRANSCODING_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_ADD_SDP_TRANSCODING_RSP
DEF_STYPE_EMP_DEL_SDP_TRANSCODING_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DEL_SDP_TRANSCODING_REQ
DEF_STYPE_EMP_DEL_SDP_TRANSCODING_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DEL_SDP_TRANSCODING_RSP
DEF_STYPE_EMP_CHG_SDP_TRANSCODING_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_CHG_SDP_TRANSCODING_REQ
DEF_STYPE_EMP_CHG_SDP_TRANSCODING_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_CHG_SDP_TRANSCODING_RSP
DEF_STYPE_EMP_DIS_SDP_TRANSCODING_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DIS_SDP_TRANSCODING_REQ
DEF_STYPE_EMP_DIS_SDP_TRANSCODING_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DIS_SDP_TRANSCODING_RSP

# Queue Monitoring
DEF_EMP_DIS_TGAS_ST_REQ       = 0x0711
DEF_EMP_DIS_TGAS_ST_RSP       = 0x0712

DEF_STYPE_EMP_DIS_TGAS_ST_REQ = DEF_EMP_STACK_BASE | DEF_REQ_MSG_BASE | DEF_EMP_DIS_TGAS_ST_REQ
DEF_STYPE_EMP_DIS_TGAS_ST_RSP = DEF_EMP_STACK_BASE | DEF_RSP_MSG_BASE | DEF_EMP_DIS_TGAS_ST_RSP

#############################################################################################################

# SLB Local
DEF_SLB_DIS_LN_REQ       = 0x0001
DEF_SLB_DIS_LN_RSP       = 0x0001
DEF_SLB_ADD_LN_REQ       = 0x0002
DEF_SLB_ADD_LN_RSP       = 0x0002
DEF_SLB_DEL_LN_REQ       = 0x0003
DEF_SLB_DEL_LN_RSP       = 0x0003

DEF_STYPE_SLB_DIS_LN_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_DIS_LN_REQ
DEF_STYPE_SLB_DIS_LN_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_DIS_LN_RSP
DEF_STYPE_SLB_ADD_LN_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_ADD_LN_REQ
DEF_STYPE_SLB_ADD_LN_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_ADD_LN_RSP
DEF_STYPE_SLB_DEL_LN_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_DEL_LN_REQ
DEF_STYPE_SLB_DEL_LN_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_DEL_LN_RSP

# SLB Remote
DEF_SLB_DIS_RMT_REQ       = 0x0011
DEF_SLB_DIS_RMT_RSP       = 0x0011
DEF_SLB_ADD_RMT_REQ       = 0x0012
DEF_SLB_ADD_RMT_RSP       = 0x0012
DEF_SLB_DEL_RMT_REQ       = 0x0013
DEF_SLB_DEL_RMT_RSP       = 0x0013

DEF_STYPE_SLB_DIS_RMT_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_DIS_RMT_REQ
DEF_STYPE_SLB_DIS_RMT_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_DIS_RMT_RSP
DEF_STYPE_SLB_ADD_RMT_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_ADD_RMT_REQ
DEF_STYPE_SLB_ADD_RMT_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_ADD_RMT_RSP
DEF_STYPE_SLB_DEL_RMT_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_PDE_DEL_RMT_REQ
DEF_STYPE_SLB_DEL_RMT_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_PDE_DEL_RMT_RSP 

# SLB Route
DEF_SLB_DIS_RTE_REQ       = 0x0021
DEF_SLB_DIS_RTE_RSP       = 0x0021
DEF_SLB_ADD_RTE_REQ       = 0x0022
DEF_SLB_ADD_RTE_RSP       = 0x0022
DEF_SLB_DEL_RTE_REQ       = 0x0023
DEF_SLB_DEL_RTE_RSP       = 0x0023
DEF_SLB_BLK_RTE_REQ       = 0x0024
DEF_SLB_BLK_RTE_RSP       = 0x0024

DEF_STYPE_SLB_DIS_RTE_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_DIS_RTE_REQ
DEF_STYPE_SLB_DIS_RTE_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_DIS_RTE_RSP
DEF_STYPE_SLB_ADD_RTE_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_ADD_RTE_REQ
DEF_STYPE_SLB_ADD_RTE_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_ADD_RTE_RSP
DEF_STYPE_SLB_DEL_RTE_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_DEL_RTE_REQ
DEF_STYPE_SLB_DEL_RTE_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_DEL_RTE_RSP
DEF_STYPE_SLB_BLK_RTE_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_BLK_RTE_REQ
DEF_STYPE_SLB_BLK_RTE_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_BLK_RTE_RSP

# SLB Sequence
DEF_SLB_DIS_SEQ_REQ       = 0x0031
DEF_SLB_DIS_SEQ_RSP       = 0x0031
DEF_SLB_ADD_SEQ_REQ       = 0x0032
DEF_SLB_ADD_SEQ_RSP       = 0x0032
DEF_SLB_DEL_SEQ_REQ       = 0x0033
DEF_SLB_DEL_SEQ_RSP       = 0x0033
DEF_SLB_CHG_SEQ_REQ       = 0x0034
DEF_SLB_CHG_SEQ_RSP       = 0x0034

DEF_STYPE_SLB_DIS_SEQ_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_DIS_SEQ_REQ
DEF_STYPE_SLB_DIS_SEQ_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_DIS_SEQ_RSP
DEF_STYPE_SLB_ADD_SEQ_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_ADD_SEQ_REQ
DEF_STYPE_SLB_ADD_SEQ_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_ADD_SEQ_RSP
DEF_STYPE_SLB_DEL_SEQ_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_DEL_SEQ_REQ
DEF_STYPE_SLB_DEL_SEQ_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_DEL_SEQ_RSP
DEF_STYPE_SLB_CHG_SEQ_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_SLB_CHG_SEQ_REQ
DEF_STYPE_SLB_CHG_SEQ_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_SLB_CHG_SEQ_RSP

#Queue Monitoring
DEF_CS_DIS_SLB_ST_REQ       = 0x1211
DEF_CS_DIS_SLB_ST_RSP       = 0x1211

DEF_STYPE_CS_DIS_SLB_ST_REQ = DEF_SLB_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_SLB_ST_REQ
DEF_STYPE_CS_DIS_SLB_ST_RSP = DEF_SLB_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_SLB_ST_RSP

#dis sync status
DEF_VLM_DIS_SYNC_REQ        = 0x0041
DEF_VLM_DIS_SYNC_RSP        = 0x0041
DEF_STYPE_VLM_DIS_SYNC_REQ  = (DEF_VLM_STACK_BASE | DEF_REQ_MSG_BASE | DEF_VLM_DIS_SYNC_REQ)
DEF_STYPE_VLM_DIS_SYNC_RSP  = (DEF_VLM_STACK_BASE | DEF_RSP_MSG_BASE | DEF_VLM_DIS_SYNC_RSP)

#SLB
DEF_VNODE_DIS_SLB_REQ       = 0x0001
DEF_VNODE_DIS_SLB_RSP       = 0x0001
DEF_VNODE_CHG_SLB_REQ       = 0x0002
DEF_VNODE_CHG_SLB_RSP       = 0x0002
DEF_STYPE_VNODE_DIS_SLB_REQ = (DEF_VNODE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_VNODE_DIS_SLB_REQ)
DEF_STYPE_VNODE_DIS_SLB_RSP = (DEF_VNODE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_VNODE_DIS_SLB_RSP)
DEF_STYPE_VNODE_CHG_SLB_REQ = (DEF_VNODE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_VNODE_CHG_SLB_REQ)
DEF_STYPE_VNODE_CHG_SLB_RSP = (DEF_VNODE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_VNODE_CHG_SLB_RSP)

#CCM
DEF_VNODE_DIS_CCM_REQ       = 0x0011
DEF_VNODE_DIS_CCM_RSP       = 0x0011
DEF_VNODE_CHG_CCM_REQ       = 0x0012
DEF_VNODE_CHG_CCM_RSP       = 0x0012
DEF_STYPE_VNODE_DIS_CCM_REQ = (DEF_VNODE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_VNODE_DIS_CCM_REQ)
DEF_STYPE_VNODE_DIS_CCM_RSP = (DEF_VNODE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_VNODE_DIS_CCM_RSP)
DEF_STYPE_VNODE_CHG_CCM_REQ = (DEF_VNODE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_VNODE_CHG_CCM_REQ)
DEF_STYPE_VNODE_CHG_CCM_RSP = (DEF_VNODE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_VNODE_CHG_CCM_RSP)

# ENV
DEF_VNODE_DIS_ENV_REQ       = 0x0021
DEF_VNODE_DIS_ENV_RSP       = 0x0021
DEF_VNODE_CHG_ENV_REQ       = 0x0022
DEF_VNODE_CHG_ENV_RSP       = 0x0022
DEF_STYPE_VNODE_DIS_ENV_REQ = (DEF_VNODE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_VNODE_DIS_ENV_REQ)
DEF_STYPE_VNODE_DIS_ENV_RSP = (DEF_VNODE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_VNODE_DIS_ENV_RSP)
DEF_STYPE_VNODE_CHG_ENV_REQ = (DEF_VNODE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_VNODE_CHG_ENV_REQ)
DEF_STYPE_VNODE_CHG_ENV_RSP = (DEF_VNODE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_VNODE_CHG_ENV_RSP)

# EMP
DEF_VNODE_DIS_EMP_REQ       = 0x0031
DEF_VNODE_DIS_EMP_RSP       = 0x0031
DEF_STYPE_VNODE_DIS_EMP_REQ = (DEF_VNODE_STACK_BASE | DEF_REQ_MSG_BASE | DEF_VNODE_DIS_EMP_REQ)
DEF_STYPE_VNODE_DIS_EMP_RSP = (DEF_VNODE_STACK_BASE | DEF_RSP_MSG_BASE | DEF_VNODE_DIS_EMP_RSP)

# EMP Hang
DEF_VLM_DIS_HANG_REQ = 0x0051
DEF_VLM_DIS_HANG_RSP = 0x0051
DEF_VLM_CHG_HANG_REQ = 0x0052
DEF_VLM_CHG_HANG_RSP = 0x0052

DEF_STYPE_VLM_DIS_HANG_REQ = DEF_VLM_STACK_BASE | DEF_REQ_MSG_BASE | DEF_VLM_DIS_HANG_REQ
DEF_STYPE_VLM_DIS_HANG_RSP = DEF_VLM_STACK_BASE | DEF_RSP_MSG_BASE | DEF_VLM_DIS_HANG_RSP
DEF_STYPE_VLM_CHG_HANG_REQ = DEF_VLM_STACK_BASE | DEF_REQ_MSG_BASE | DEF_VLM_CHG_HANG_REQ
DEF_STYPE_VLM_CHG_HANG_RSP = DEF_VLM_STACK_BASE | DEF_RSP_MSG_BASE | DEF_VLM_CHG_HANG_RSP

#############################################################################################################

# IGW Timer
DEF_CS_DIS_IGW_TIMER_REQ = 0x1301
DEF_CS_DIS_IGW_TIMER_RSP = 0x1301 
DEF_CS_CHG_IGW_TIMER_REQ = 0x1302
DEF_CS_CHG_IGW_TIMER_RSP = 0x1302

DEF_STYPE_CS_DIS_TIMER_IGW_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_IGW_TIMER_REQ
DEF_STYPE_CS_DIS_TIMER_IGW_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_IGW_TIMER_RSP
DEF_STYPE_CS_CHG_TIMER_IGW_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_IGW_TIMER_REQ
DEF_STYPE_CS_CHG_TIMER_IGW_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_IGW_TIMER_RSP

# NPDB Timer
DEF_CS_DIS_NPDB_TIMER_REQ = 0x1401
DEF_CS_DIS_NPDB_TIMER_RSP = 0x1401
DEF_CS_CHG_NPDB_TIMER_REQ = 0x1402
DEF_CS_CHG_NPDB_TIMER_RSP = 0x1402

DEF_STYPE_CS_DIS_TIMER_NPDB_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_NPDB_TIMER_REQ
DEF_STYPE_CS_DIS_TIMER_NPDB_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_NPDB_TIMER_RSP
DEF_STYPE_CS_CHG_TIMER_NPDB_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_NPDB_TIMER_REQ
DEF_STYPE_CS_CHG_TIMER_NPDB_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_NPDB_TIMER_RSP

# IGW Local
DEF_CS_DIS_IGW_LOC_REQ = 0x1501
DEF_CS_DIS_IGW_LOC_RSP = 0x1501

DEF_STYPE_CS_DIS_IGW_LOC_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_IGW_LOC_REQ
DEF_STYPE_CS_DIS_IGW_LOC_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_IGW_LOC_RSP

# IGW Remote
DEF_CS_DIS_IGW_RMT_REQ  = 0x1502
DEF_CS_DIS_IGW_RMT_RSP  = 0x1502
DEF_CS_CHG_IGW_RMT_REQ  = 0x1503
DEF_CS_CHG_IGW_RMT_RSP  = 0x1503
DEF_CS_CRTE_IGW_RMT_REQ = 0x1504
DEF_CS_CRTE_IGW_RMT_RSP = 0x1504
DEF_CS_DEL_IGW_RMT_REQ  = 0x1505
DEF_CS_DEL_IGW_RMT_RSP  = 0x1505

DEF_STYPE_CS_DIS_IGW_RMT_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_IGW_RMT_REQ
DEF_STYPE_CS_DIS_IGW_RMT_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_IGW_RMT_RSP
DEF_STYPE_CS_CHG_IGW_RMT_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_IGW_RMT_REQ
DEF_STYPE_CS_CHG_IGW_RMT_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_IGW_RMT_RSP
DEF_STYPE_CS_CRTE_IGW_RMT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CRTE_IGW_RMT_REQ
DEF_STYPE_CS_CRTE_IGW_RMT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CRTE_IGW_RMT_RSP
DEF_STYPE_CS_DEL_IGW_RMT_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_IGW_RMT_REQ
DEF_STYPE_CS_DEL_IGW_RMT_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_IGW_RMT_RSP

# IGW Route
DEF_CS_DIS_IGW_RTE_REQ  = 0x1506
DEF_CS_DIS_IGW_RTE_RSP  = 0x1506
DEF_CS_CHG_IGW_RTE_REQ  = 0x1507
DEF_CS_CHG_IGW_RTE_RSP  = 0x1507
DEF_CS_CRTE_IGW_RTE_REQ = 0x1508
DEF_CS_CRTE_IGW_RTE_RSP = 0x1508
DEF_CS_DEL_IGW_RTE_REQ  = 0x1509
DEF_CS_DEL_IGW_RTE_RSP  = 0x1509 

DEF_STYPE_CS_DIS_IGW_RTE_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_IGW_RTE_REQ
DEF_STYPE_CS_DIS_IGW_RTE_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_IGW_RTE_RSP
DEF_STYPE_CS_CHG_IGW_RTE_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_IGW_RTE_REQ
DEF_STYPE_CS_CHG_IGW_RTE_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_IGW_RTE_RSP
DEF_STYPE_CS_CRTE_IGW_RTE_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CRTE_IGW_RTE_REQ
DEF_STYPE_CS_CRTE_IGW_RTE_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CRTE_IGW_RTE_RSP
DEF_STYPE_CS_DEL_IGW_RTE_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_IGW_RTE_REQ
DEF_STYPE_CS_DEL_IGW_RTE_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_IGW_RTE_RSP

# NPDB Local
DEF_CS_DIS_NPDB_LOC_REQ = 0x1601
DEF_CS_DIS_NPDB_LOC_RSP = 0x1601

DEF_STYPE_CS_DIS_NPDB_LOC_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_NPDB_LOC_REQ
DEF_STYPE_CS_DIS_NPDB_LOC_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_NPDB_LOC_RSP

# NPDB Remote
DEF_CS_CHG_NPDB_RMT_REQ  = 0x1603
DEF_CS_CHG_NPDB_RMT_RSP  = 0x1603
DEF_CS_DIS_NPDB_RMT_REQ  = 0x1602
DEF_CS_DIS_NPDB_RMT_RSP  = 0x1602
DEF_CS_CRTE_NPDB_RMT_REQ = 0x1604
DEF_CS_CRTE_NPDB_RMT_RSP = 0x1604
DEF_CS_DEL_NPDB_RMT_REQ  = 0x1605
DEF_CS_DEL_NPDB_RMT_RSP  = 0x1605

DEF_STYPE_CS_DIS_NPDB_RMT_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_NPDB_RMT_REQ
DEF_STYPE_CS_DIS_NPDB_RMT_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_NPDB_RMT_RSP
DEF_STYPE_CS_CHG_NPDB_RMT_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_NPDB_RMT_REQ
DEF_STYPE_CS_CHG_NPDB_RMT_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_NPDB_RMT_RSP
DEF_STYPE_CS_CRTE_NPDB_RMT_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CRTE_NPDB_RMT_REQ
DEF_STYPE_CS_CRTE_NPDB_RMT_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CRTE_NPDB_RMT_RSP
DEF_STYPE_CS_DEL_NPDB_RMT_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_NPDB_RMT_REQ
DEF_STYPE_CS_DEL_NPDB_RMT_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_NPDB_RMT_RSP

# NPDB Route
DEF_CS_DIS_NPDB_RTE_REQ  = 0x1606
DEF_CS_DIS_NPDB_RTE_RSP  = 0x1606
DEF_CS_CHG_NPDB_RTE_REQ  = 0x1607
DEF_CS_CHG_NPDB_RTE_RSP  = 0x1607
DEF_CS_CRTE_NPDB_RTE_REQ = 0x1608
DEF_CS_CRTE_NPDB_RTE_RSP = 0x1608
DEF_CS_DEL_NPDB_RTE_REQ  = 0x1609
DEF_CS_DEL_NPDB_RTE_RSP  = 0x1609

DEF_STYPE_CS_DIS_NPDB_RTE_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DIS_NPDB_RTE_REQ
DEF_STYPE_CS_DIS_NPDB_RTE_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DIS_NPDB_RTE_RSP
DEF_STYPE_CS_CHG_NPDB_RTE_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CHG_NPDB_RTE_REQ
DEF_STYPE_CS_CHG_NPDB_RTE_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CHG_NPDB_RTE_RSP
DEF_STYPE_CS_CRTE_NPDB_RTE_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CRTE_NPDB_RTE_REQ
DEF_STYPE_CS_CRTE_NPDB_RTE_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CRTE_NPDB_RTE_RSP
DEF_STYPE_CS_DEL_NPDB_RTE_REQ  = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_DEL_NPDB_RTE_REQ
DEF_STYPE_CS_DEL_NPDB_RTE_RSP  = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_DEL_NPDB_RTE_RSP

# Connection
DEF_CS_CON_IGW_RTE_REQ = 0x150a
DEF_CS_CON_IGW_RTE_RSP = 0x150a
DEF_STYPE_CS_CON_IGW_RTE_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CON_IGW_RTE_REQ
DEF_STYPE_CS_CON_IGW_RTE_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CON_IGW_RTE_RSP

DEF_CS_CON_NPDB_RTE_REQ = 0x160a
DEF_CS_CON_NPDB_RTE_RSP = 0x160a
DEF_STYPE_CS_CON_NPDB_RTE_REQ = DEF_CS_STACK_BASE | DEF_REQ_MSG_BASE | DEF_CS_CON_NPDB_RTE_REQ
DEF_STYPE_CS_CON_NPDB_RTE_RSP = DEF_CS_STACK_BASE | DEF_RSP_MSG_BASE | DEF_CS_CON_NPDB_RTE_RSP

#############################################################################################################

SVC_MAX_DESCNAME      = 32
DEF_LM_NAME_LEN       = 32
DEF_LM_DESC_LEN       = 128

DEF_RTE_MAXLEN_DESC   = 40
DEF_RTE_MAXLEN_DOMAIN = 40
DEF_RTE_MAXLEN_IP     = 40
DEF_RTE_MAXLEN_STRIUNAVAIL = 56

E_LOC_MAXNUM          = 40
E_MAXNUM              = 100

E_RMT_MAXNUM          = 300 # 100->300
E_RTE_MAXNUM          = 300 # 100->300
E_RTE_SEQ_MAXNUM      = 300 # 100->300
E_SPC_SEQ_MAXNUM      = 100

E_MAX_ARTE            = 20
E_MAX_RSEQ            = 100 # spc_seq 20->100

E_RULE_MAXNUM         = 200

DEF_LM_RULE_STRING_SZ = 128
DEF_LM_PARAM_MAX_SZ   = 100

E_RTE_GRP_MAXNUM      = 40

RTE_RESERVED_SIZE     = 12

SVC_UNION_SIZE        = 24
SVC_RESERVED_SIZE     = 14

E_TRGW_MAXNUM         = 8

E_CAUSE_MAX           = 20 # R131 18->20
E_RC_MAXNUM           = 8

MAX_PDE_RMT_NUM       = 32
MAX_PDE_RTE_NUM       = 64

E_MINMAX_NUMBER       = 36
E_MAXNUM_EC           = 100

DEF_MAX_MONITOR       = 100

DEF_LM_IP_LEN         = 40
DEF_LM_NODE_LEN       = 20

#############################################################################################################

E_RULE_TYPE_ADD = 1
E_RULE_TYPE_MOD = 2
E_RULE_TYPE_DEL = 3
E_RULE_TYPE_MAX = 4

E_CHG_TYPE_PT   = 1
E_CHG_TYPE_FMTP = 2
E_CHG_TYPE_RATE = 3
E_CHG_TYPE_FS   = 4

E_MANIPULATION_TYPE_ADD = 1
E_MANIPULATION_TYPE_MOD = 2
E_MANIPULATION_TYPE_DEL = 3
E_MANIPULATION_TYPE_MAX = 4

E_SDP_TYPE_AUDIO = 1
E_SDP_TYPE_VIDEO = 2
E_SDP_TYPE_MAX   = 3

E_SDP_NOTHING_MACHING   = 0
E_SDP_FULL_MACHING      = 1
E_SDP_PARTIAL_MACHING   = 2
E_SDP_PREFIX_MACHING    = 3
E_SDP_MACHING_LEVEL_MAX = 4
    
E_SDP_CONDITION_NOTHING   = 0
E_SDP_CONDITION_INCLUDE   = 1
E_SDP_CONDITION_EXCLUDE   = 2
E_SDP_CONDITION_MAX_LEVEL = 3

e_tga_status_ok           = 0x00
e_tga_status_ng           = 0x01
e_tga_status_block        = 0x02
e_tga_status_connect_fail = 0x04
e_tga_status_not_active   = 0x08
e_tga_status_hw_fail      = 0x10
e_tga_status_nic_fail     = 0x20
e_tga_status_init_fail    = 0x40
    
E_CODEC_MAX_LIST              = 20
E_RULE_MAX_LIST               = 20
E_CODEC_MAX_SDP_MANIPULATION  = 20
E_CODEC_MAX_SDP_RULE          = 20
EMG_MAX_TG_ROUTE              = 40
E_CODEC_MAX_SDP_CODEC_MANAGER = 40
E_CODEC_MAX_SDP_TRANSCODING   = 20

DEF_VLM_DESC_LEN         = 128

E_MAXNUM_NAME            = 128
E_MAXNUM_VALUE           = 128
E_MAXNUM_FMTP            = 256
E_MAXNUM_FS              = 16
E_MAXNUM_NAME_CODE_IFNO  = 24

#############################################################################################################

E_NAME_SZ = 64
E_IP_SZ   = 64

E_DIS_NUMS = 100

E_CONST_MAX_VM_NODE        = 100
E_CONST_MAX_IPADDR_LEN     = 50
E_CONST_MAX_EMP_IPADDR_LEN = 64
E_CONST_MAX_DIS_ENUM       = 100

#############################################################################################################

ST_NONE       = 0
ST_ID         = 1
ST_KEY        = 2
ST_ID_KEY     = 3
ST_RULE_ATTRI = 4

E_ESIP_TRANSPORT_TLS  = 1
E_ESIP_TRANSPORT_TCP  = 2
E_ESIP_TRANSPORT_UDP  = 3
E_ESIP_TRANSPORT_SCTP = 4
E_ESIP_TRANSPORT_DCCP = 5
E_ESIP_TRANSPORT_DTLS = 6
E_ESIP_TRANSPORT_WS   = 7
E_ESIP_TRANSPORT_WSS  = 8

E_RULE_COND_NONE = 0
E_RULE_COND_ON   = 1
E_RULE_COND_OFF  = 2
E_RULE_COND_AND  = 3
E_RULE_COND_OR   = 4
   
E_RULE_ATT_NONE             = 0
E_RULE_ATT_CALLRING_DOMAIN  = 1
E_RULE_ATT_CALLER_DOMAIN    = 2
E_RULE_ATT_CALLED_DOMAIN    = 3
E_RULE_ATT_CALLER_PREFIX    = 4
E_RULE_ATT_CALLED_PREFIX    = 5
E_RULE_ATT_CALLER_REALM     = 6
E_RULE_ATT_CALLED_REALM     = 7
E_RULE_ATT_HEADER_NAME      = 8
E_RULE_ATT_HEADER_VALUE     = 9
E_RULE_ATT_RECV_LOC         = 10
E_RULE_ATT_REQUEST          = 11
E_RULE_ATT_RESPONSE_MC      = 12
E_RULE_ATT_HEADER_GENVALUE  = 13
E_RULE_ATT_DISPLAY_NAME     = 14
E_RULE_ATT_URI_GEN_VALUE    = 15
E_RULE_ATT_URI_GEN_HEADER   = 16
E_RULE_ATT_URI_USERNAME     = 17
E_RULE_ATT_HOST             = 18
E_RULE_ATT_URI_REALM        = 19
E_RULE_ATT_URI_PORT         = 20 
E_RULE_ATT_URI_SCHEME       = 21
E_RULE_ATT_URI_STRING       = 22
E_RULE_ATT_EXT_HDR_GEN      = 23
E_RULE_ATT_URI_SUB_VALUE    = 24
E_RULE_ATT_RULE_GROUP       = 25
E_RULE_ATT_MATCH_LOC_ID     = 26
E_RULE_ATT_MATCH_RMT_ID     = 27
E_RULE_ATT_MATCH_RTE_ID     = 28
E_RULE_ATT_DIRECTION        = 29
E_RULE_ATT_NPDB_RESULT      = 30
E_RULE_ATT_IGW_RESULT       = 31
E_RULE_ATT_POINT_CODE       = 32
E_RULE_ATT_HEADER_VALUE_BIT = 33

E_MSG_POS_NONE         = 0
E_MSG_POS_ALL          = 1
E_MSG_POS_EXCEPT_FIRST = 2
E_MSG_POS_EXCEPT_LAST  = 3
E_MSG_POS_ONLY_FIRST   = 4
E_MSG_POS_ONLY_LAST    = 5
E_MSG_POS_DEPEND_RULE  = 6
E_MSG_POS_SHIFT_UP     = 7 
E_MSG_POS_SHIFT_DOWN   = 8
E_MSG_POS_ORDER        = 9
  
E_RULE_MATCH_NONE = 0
E_RULE_MATCH_FULL = 1
E_RULE_MATCH_PART = 2
E_RULE_MATCH_NUM  = 3
E_RULE_MATCH_SEQ  = 4
   
E_RULE_SAVE_NON        = 0
E_RULE_SAVE_NOT        = 1
E_RULE_SAVE_VALUE1     = 2
E_RULE_SAVE_VALUE2     = 3
E_RULE_SAVE_VALUE3     = 4
E_RULE_SAVE_POS        = 5
E_RULE_SAVE_VALUE_INST = 6

E_ROUTE_OP_NONE = 0
E_ROUTE_OP_RSEQ = 1
E_ROUTE_OP_SSEQ = 2
 
E_SERVICE_OPS_NONE       = 0
E_SERVICE_OPS_SRC_SCREEN = 1
E_SERVICE_OPS_DST_SCREEN = 2
E_SERVICE_OPS_FILTER     = 3
    
E_SCREEN_ACTION_NONE                = 0
E_SCREEN_ACTION_ADD_HDR_VALUE       = 1
E_SCREEN_ACTION_ADD_HDR_PARAM       = 2
E_SCREEN_ACTION_DEL_HDR_NAME        = 3 
E_SCREEN_ACTION_DEL_HDR_PARAM       = 4
E_SCREEN_ACTION_CVT_REQ_URI         = 5
E_SCREEN_ACTION_ADD_URI_GEN_PARAM   = 6
E_SCREEN_ACTION_ADD_URI_HDR_PARAM   = 7
E_SCREEN_ACTION_ADD_URI_SCHEME      = 8
E_SCREEN_ACTION_ADD_URI_USERNAME    = 9
E_SCREEN_ACTION_ADD_URI_HOST        = 10
E_SCREEN_ACTION_ADD_URI_PORT        = 11
E_SCREEN_ACTION_ADD_URI_DISPLAYNAME = 12
E_SCREEN_ACTION_ADD_URI_STRING      = 13
E_SCREEN_ACTION_DEL_URI_DISPLAYNAME = 14
E_SCREEN_ACTION_DEL_URI_GEN_PARAM   = 15
E_SCREEN_ACTION_DEL_URI_HDR_PARAM   = 16
E_SCREEN_ACTION_DEL_URI_SCHEME      = 17
E_SCREEN_ACTION_DEL_URI_USERNAME    = 18 
E_SCREEN_ACTION_DEL_URI_HOST        = 19
E_SCREEN_ACTION_DEL_URI_PORT        = 20
E_SCREEN_ACTION_DEL_URI_STRING      = 21
E_SCREEN_ACTION_MOV_PARAM           = 22
E_SCREEN_ACTION_MOV_URI_PARAM       = 23
E_SCREEN_ACTION_MOV_URI_HDR         = 24
E_SCREEN_ACTION_CVT_RSP             = 25
E_SCREEN_ACTION_CVT_URI_SCHEME      = 26

E_MAXMSG_CTRL_NOTTHING    = 0
E_MAXMSG_DROP             = 1
E_MAXMSG_RSP_ERROR        = 2
E_MAXMSG_CTRL_RELAY_TCP   = 3

E_FILTER_ACT_NONE    = 0
E_FILTER_ACT_DENY    = 1
E_FILTER_ACT_DISCARD = 2

MSG_RULESET_ON_STR = 'RuleSet is Certainly start in "ON"'

'''
struct SVCComMsgHdr
{
   unsigned int uiMagicCookie;
   unsigned int uiMsgLen;
   unsigned int uiType;
   unsigned int uiSubType;
   unsigned int uiCompId;
   unsigned int uiCompSesId;
   unsigned int uiAsId;
   unsigned int uiAsSesId; // // sizeof 4*8 = 32

   char szSesDesc[SVC_MAX_DESCNAME=32]; // sizeof 32

   unsigned int uiReasonCode; // sizeof 4
   
union{
      char         Reserved[24]            ;
      struct {
         unsigned int uiOPC                ; //opc
         unsigned int uiDPC                ; //dpc
      }sp_; 
      
      struct {
#ifdef V2TDM_BIG_ENDIAN
         unsigned char   ucShelf    :8;
         unsigned char   ucBoard    :8;
         unsigned char   ucTrunk    :8;
         unsigned char   ucChannel  :8;
#else
         unsigned char   ucChannel  :8;
         unsigned char   ucTrunk    :8;
         unsigned char   ucBoard    :8;
         unsigned char   ucShelf    :8;
#endif
      }tdm_;
   }; // sizeof union = 24
   
   char* data(){
      return (char*)(this+1);
   }
};

'''

# common header
FMT_UDP_HEADER = '=IIIIIIII%dsI%ds' % (SVC_MAX_DESCNAME, SVC_UNION_SIZE)

ATTR_UDP_HEADER = "uiMagicCookie uiMsgLen uiType uiSubType uiCompId uiCompSesId uiAsId uiAsSesId szSesDesc uiReasonCode union_Reserved"



class IbcfException(MMICommandException):
    # Subclasses that define an __init__ must call Exception.__init__
    # or define self.args.  Otherwise, str() will fail.
    pass

class NotConnected(IbcfException):
    pass


class IbcfConnection:

    def __init__(self, host, port, recv_port):
        self._set_hostport(host, port)
        self.send_sock = None
        self.__state = _CS_IDLE
        
        self.send_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        
        # window python code - test
        #self.send_sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        
        listen_addr = ('', recv_port)

        self.send_sock.bind(listen_addr)
    
    def setMsgType(self, type):
        self._type = type
             
    def _set_hostport(self, host, port):
        self.host = host
        self.port = port
        
        
    def sendRequestUDP(self, data):          
        try:
            self.send_sock.sendto(data, (self.host, self.port))
        
        except socket.error, e:
            raise EventInfoException(e)
             
            
    def recvResponse(self, recvSize, responseMsg):

        self.send_sock.settimeout(3)
        
        packet, addr = self.send_sock.recvfrom(recvSize)

        recvLen = recvSize - len(packet)
        while recvLen > 0:  
            
            print "-----------------------------------------"
            print "Total  Packet Size : %d" % recvSize
            print "Recv   Packet Size : %d" % len(packet)
            print "Remain Packet Size : %d" % recvLen
            print "....wating"

            packetEx, addrEx = self.send_sock.recvfrom(recvLen)
            packet += packetEx
            recvLen = recvSize - len(packet)
        
        print "Recv End"
        print "-----------------------------------------"

        '''
        if len(packet) < recvSize:
           packetEx, addrEx = self.send_sock.recvfrom(recvSize - len(packet))
           packet += packetEx
        '''
        
        '''
        packet, addr = self.send_sock.recvfrom(calcsize(FMT_UDP_HEADER)) # SVCComMsgHdr size
        UDP_MSG_HDR = namedtuple("UDP_MSG_HDR", ATTR_UDP_HEADER)
        udp_header = UDP_MSG_HDR._make(unpack(FMT_UDP_HEADER, packet))
        print udp_header.uiMsgLen
        '''
        
        return responseMsg.unpack(packet)

           
class IbcfMsg:
           
    def __init__(self, uiMagicCookie=0, uiMsgLen=0, uiType=0, uiSubType=0, uiCompId=0, uiCompSesId=0, uiAsId=0, uiAsSesId=0,
                 szSesDesc='', uiReasonCode=0, union_Reserved=''):
        
        self.uiMagicCookie = uiMagicCookie
        self.uiMsgLen = uiMsgLen
        self.uiType = uiType 
        self.uiSubType = uiSubType

        self.uiCompId = STACK_PROC_LM
        self.uiCompSesId = uiCompSesId 
        self.uiAsId = STACK_PROC_OMP
        self.uiAsSesId = uiAsSesId

        self.szSesDesc = szSesDesc
        self.uiReasonCode = uiReasonCode        
        self.union_Reserved = union_Reserved
               
    def getFormat(self):
        return FMT_UDP_HEADER
    
    def pack(self):
        return pack(self.getFormat(), \
                    self.uiMagicCookie, self.uiMsgLen, self.uiType, self.uiSubType, \
                    self.uiCompId, self.uiCompSesId, self.uiAsId, self.uiAsSesId, self.szSesDesc, self.uiReasonCode, \
                    self.union_Reserved)
        
    def printMessage(self, msg):
        print ''
        

class IbcfRequestMsg(IbcfMsg):
    def __init__(self, uiMagicCookie, uiMsgLen, uiType, uiSubType):
        IbcfMsg.__init__(self, uiMagicCookie, uiMsgLen, uiType, uiSubType)


class IbcfResponseMsg(IbcfMsg):

    def getAttributes(self):
        return ATTR_UDP_HEADER
    
    def unpack(self, binary):
        ResponseMsg = namedtuple("ResponseMsg", self.getAttributes())
        return ResponseMsg._make(unpack(self.Foramt(), binary))

    
class IbcfCommand(MMICommand):

    def __init__(self, request, response):
        MMICommand.__init__(self)
        self.setIbcfRequestMsg(request)
        self.setIbcfResponseMsg(response)
    
    def setIbcfRequestMsg(self, request):
        self.request = request

    def getIbcfRequestMsg(self):
        return self.request

    def setIbcfResponseMsg(self, response):
        self.response = response

    def getIbcfResponseMsg(self):
        return self.response
        
    def printMessage(self, imsg, omsg):
        self.printHeader()
        print "[INPUT]"
        print "%-10s = %s" % ('COMMAND', self.getCommandName())
        print ""
        print "%-12s %s" % ('', self.getCommandDesc())
        try:
            self.printInputMessage(imsg)
        except Exception:
            print "     %-5s = %s" % ('ARGS', repr(sys.argv[1:]))
            
        print ""
        print "[OUTPUT]"     
        if(self.exception is None) : 
            try:
                if omsg.m_nResult == IBCF_COMMAND_RESULT_SUCCESS :
                   self.printOutputMessage(omsg)
            except Exception:
                pass
            
            print ""
          
            if omsg.m_nResult == IBCF_COMMAND_RESULT_SUCCESS :
               print "%-10s = %s" % ('RESULT', "OK")
            elif omsg.m_nResult == IBCF_COMMAND_RESULT_FAILURE :
               print "%-10s = %s" % ('RESULT', "NOK")
                
            if omsg.m_nResult == IBCF_COMMAND_RESULT_FAILURE :
                print "%-10s = %s" % ('REASON', self.reprName(omsg.m_szReasonDesc))
            
        else :
            print "%-10s = %s" % ('RESULT', 'NOK')
            print "%-10s = %s" % ('REASON', self.exception)
            #traceback.print_exc(file=sys.stdout)
        self.printTail()
    
    '''
    def printMessageInner(self, imsg, omsg):            
        if(self.exception is None) : 
            try:
               self.printOutputMessage(omsg)
            except Exception:
                pass
        else :
            print self.exception 
    '''

    def execute(self, recvSize):
        
        if(self.response is None) :
            raise IbcfException()

        conn = IbcfConnection(self.config.get('COMMON', 'lm.host'), self.config.getint('COMMON', 'lm.port'), self.config.getint('COMMON', 'mmi.port'))
  
        self.exception = None
        
        try :   
            conn.sendRequestUDP(self.request.pack())
            self.response = conn.recvResponse(recvSize, self.response)
            
        except Exception, e:
            print '>>> EventInfoCommand exception...'
            self.exception = e
        
        #conn.close()
    
        self.printMessage(self.request, self.response)
        
    def printExcecption(self, e):
        if type(e) is MMICommandParamException:
            self.printUsage()
        else :
            self.exception = e
            self.printMessage(self.request, self.response)         
          
    ########################################################################
    
    def reprName(self, name):
        tempName = []
        for i in range(len(name)):
            if name[i] != '\x00':
                tempName.append(name[i])
            else:
                break

        fixname = "".join(tempName)
        return fixname

    def reprNameShorter(self, name, chklen, cutlen):
        value = self.reprName(name)
        if len(value) > int(chklen):
           value = value[0:int(cutlen)]
           value = value + " ...."
        return value
    
    ########################################################################
           
    def reprIpVerIntToStr(self, ipver):
       if   ipver == 4: return "IPv4"
       elif ipver == 6: return "IPv6"
       else: return "UNKNOWN"
    
    def reprIpVerStrToInt(self, ipver):
       if   ipver == "IP4" : return 4
       elif ipver == "IP6" : return 6
       else: return 0
       
    def reprPdeIpVerIntToStr(self, ipver):
       if   ipver == 0: return "IPv4"
       elif ipver == 1: return "IPv6"
       else: return "UNKNOWN"

    def reprPdeIpVerStrToInt(self, ipver):
       if   ipver == "IP4" : return 0
       elif ipver == "IP6" : return 1
       else: return -1
            
    ########################################################################
            
    def reprProctIntToStr(self, protocol):
        if   protocol == E_ESIP_TRANSPORT_TLS  : return "TLS"
        elif protocol == E_ESIP_TRANSPORT_TCP  : return "TCP"
        elif protocol == E_ESIP_TRANSPORT_UDP  : return "UDP"
        elif protocol == E_ESIP_TRANSPORT_SCTP : return "SCTP"
        elif protocol == E_ESIP_TRANSPORT_DCCP : return "DCCP"
        elif protocol == E_ESIP_TRANSPORT_DTLS : return "DTLS"
        elif protocol == E_ESIP_TRANSPORT_WS   : return "WS"
        elif protocol == E_ESIP_TRANSPORT_WSS  : return "WSS"
        else: return "UNKNOWN"
        
    def reprProcStrToInt(self, protocol):
        if   protocol == "TLS"  : return E_ESIP_TRANSPORT_TLS
        elif protocol == "TCP"  : return E_ESIP_TRANSPORT_TCP
        elif protocol == "UDP"  : return E_ESIP_TRANSPORT_UDP
        elif protocol == "SCTP" : return E_ESIP_TRANSPORT_SCTP
        elif protocol == "DCCP" : return E_ESIP_TRANSPORT_DCCP
        elif protocol == "DTLS" : return E_ESIP_TRANSPORT_DTLS
        elif protocol == "WS"   : return E_ESIP_TRANSPORT_WS
        elif protocol == "WSS"  : return E_ESIP_TRANSPORT_WSS
        else: return 0

    def reprPdeProctIntToStr(self, protocol):
        if   protocol == 0  : return "TCP"
        elif protocol == 1  : return "SCTP"
        else: return "UNKNOWN"
        
    def reprPdeProctStrToInt(self, protocol):
        if   protocol == "TCP"  : return 0
        elif protocol == "SCTP" : return 1
        else: return -1
   
   ########################################################################
   
    def reprStsIntToStr(self, num):
        if   num == 0: return "AVAIL"
        elif num == 1: return "UNAVAIL"
        elif num == 2: return "UNAVAIL"
        else: return "UNKNOWN"
   
    def reprTrgwStsIntToStr(self, num):
        if   num == 0: return "AVAIL"
        elif num == 1: return "FBLOCK"
        elif num == 2: return "MBLOCK"
        elif num == 3: return "F/MBLOCK"
        else: return "UNKNOWN"
        
    def reprTrgwStsStrToInt(self, num):
        if   num == "AVAIL"  : return 0
        elif num == "FBLOCK" : return 1
        elif num == "MBLOCK" : return 2
        else: return -1         
   
    def reprPdeRteStsIntToStr(self, num):
        if   num == 0: return "DISCONNECT"
        elif num == 1: return "CONNECT"
        else: return "UNKNOWN"
        
    def reprPdeRteStsStrToInt(self, num):
        if   num == "DISCONNECT" : return 0
        elif num == "CONNECT"    : return 1
        else: return -1
   
   ########################################################################
   
    def reprIgwNpdbStsIntToStr(self, num):
        if   num == 0: return "AVAIL"
        elif num == 1: return "FAULT"  
   
    def reprIgwNpdbStsStrToInt(self, num):
        if   num == "AVAIL" : return 0
        elif num == "FAULT" : return 1
        
    def reprIgwNpdbBlkIntToStr(self, num):
        if   num == 0 : return "AVAIL"
        elif num == 1 : return "MBLOCK"
        
    def reprIgwNpdbBlkStrToInt(self, num):
        if   num == "AVAIL" : return 0
        elif num == "MBLOCK" : return 1         
   
    def reprIgwNpdbRteStsIntToStr(self, num):
        if   num == 2: return "DISCONNECT"
        elif num == 1: return "CONNECT"
        elif num == 0: return "NONE"
        else: return "UNKNOWN"
        
    def reprIgwNpdbRteStsStrToInt(self, num):
        if   num == "DISCONNECT" : return 2
        elif num == "CONNECT"    : return 1
        elif num == "NONE"       : return 0
        else: return -1
   
    ########################################################################
         
    def reprOnOffIntToStr(self, num):
        if   num == 0: return "OFF"
        elif num == 1: return "ON"
        else: return "UNKNOWN"  
           
    def reprOnOffStrToInt(self, strName):
        if   strName == "OFF": return 0
        elif strName == "ON" : return 1
        else: return -2

   ########################################################################
   
    def reprRteTypeStrToInt(self, type):
        upType = type.upper()
        if   upType == "MINE"  : return 1
        elif upType == "OTHER" : return 2
        else: return 0
        
    def reprRteTypeIntToStr(self, type):
        if   type == 1 : return "MINE"
        elif type == 2 : return "OTHER"
        else: return "UNKNOWN" 

    def reprRteMediaStrToInt(self, media):
        upMedia = media.upper()
        if   upMedia == "ROUTED"   : return 1
        elif upMedia == "DIRECTED" : return 2
        else: return 0
        
    def reprRteMediaIntToStr(self, media):
        if   media == 1   : return "ROUTED"
        elif media == 2 : return "DIRECTED"
        else: return "UNKNOWN"
        
   ########################################################################
   
    def reprActionStrToInt(self, chk):
        upChk = chk.upper()
        if   upChk == "ACT"    : return 0
        elif upChk == "BYPASS" : return 1
        elif upChk == "DEACT"  : return 2
        else: return 9
    
    def reprActionIntToStr(self, chk):
        if   chk == 0: return "ACT"
        elif chk == 1: return "BYPASS"
        elif chk == 2: return "DEACT"
        else: return "UNKNOWN"
    
    ########################################################################
    
    def reprReponseStrToInt(self, chk):
        upChk = chk.upper()
        if   upChk == "SEND": return 1
        elif upChk == "DROP": return 2
        else: return 0
    
    def reprReponseIntToStr(self, chk):
        if   chk == 1: return "SEND"
        elif chk == 2: return "DROP"
        else: return "UNKNOWN"    
    
    ########################################################################
    
    def convert_long_to_bytes(self, val, endianness='big', ischar='no', isS32='no'):
        width = val.bit_length()
        
        if isS32=='no':
            width += 8 - ((width % 8) or 8)
        else:
            width += 32 - ((width % 32) or 32)
            
        if width == 8:
            fmt = '%%0%dx' % (width // 2)

        elif width == 16:
            if isS32=='no':
                fmt = '%%0%dx' % (width // 4)
            else:
                fmt = '%%0%dx' % (width // 2)

        elif width == 32: ## over 65535
            if isS32=='no':
                fmt = '%%0%dx' % (width // 8)
            else:
                fmt = '%%0%dx' % (width // 4)

        elif width == 0:
            if ischar == 'no':
                fmt = '%%0%dx' % 8
            else:
                fmt = '%%0%dx' % 2
            
        if val < 0:
            s = unhexlify(fmt % (val&0xffffffff))
        else:
            s = unhexlify(fmt % val)
            
        if endianness == 'little':
            s = s[::-1]
            
        return s
    
    ########################################################################
    
    def reprSpcSeqHextoStrInt(self, list):
        tempList = []
        isFirstList = 0

        for i in range(len(list)):
            if i % 4 == 0:
                if i == (E_MAX_RSEQ*4)-1:
                    break
                else:
                    byte_end = list[i]
                    byte_m2 = list[i + 1]
                    byte_m1 = list[i + 2]
                    byte_begin = list[i + 3]

                    byte_total = byte_begin + byte_m1 + byte_m2 + byte_end

                    rep_byte_total = int(byte_total.encode("hex"), 16)

                    rep_name = str(rep_byte_total)
                    tempList.append(rep_name)
            else:
                pass
            
        return tempList

    def parsIntListStr(self, list, isS32 = 'no'):
        tempList = []
        tempRepList = []
        
        tempList = re.split('/', list)
            
        for i in range(len(tempList)):
            if isS32 == 'no':
                tempRepList.append(self.convert_long_to_bytes(int(tempList[i]), 'little'))
            else:
                tempRepList.append(self.convert_long_to_bytes(int(tempList[i]), 'little', 'no', 'yes'))      
         
        strRouteList = "".join(tempRepList)
                
        return strRouteList 
    
    ########################################################################
    
    def reprRulesetHexIntToStr(self, ruleset): 
        tempList = []
        for i in range(len(ruleset)):
            if i % 4 == 0:
                if i == (DEF_LM_PARAM_MAX_SZ*4)-1:
                    break
                else:
                    byte_end = ruleset[i]
                    byte_m2 = ruleset[i + 1]
                    byte_m1 = ruleset[i + 2]
                    byte_begin = ruleset[i + 3]

                    byte_total = byte_begin + byte_m1 + byte_m2 + byte_end
                    
                    rep_byte_total = int(byte_total.encode("hex"), 16)
                    
                    if rep_byte_total != 0:
                        rep_name = str(rep_byte_total)
                        tempList.append(rep_name)
                    else:
                        pass
            else:
                pass   
  
        tempRepList = []
        for j in range(len(tempList)):
            
            if j % 2 == 0:
                if int(tempList[j]) == E_RULE_COND_ON:
                    tempRepList.append(" ON ")
                elif int(tempList[j]) == E_RULE_COND_OFF:
                    tempRepList.append(" OFF ")
                elif int(tempList[j]) == E_RULE_COND_AND:
                    tempRepList.append(" AND ")
                elif int(tempList[j]) == E_RULE_COND_OR:
                    tempRepList.append(" OR ")                                        
                else:
                    tempRepList.append(tempList[j])
            else:
                tempRepList.append(tempList[j]) 

        strName = "".join(tempRepList)
                
        return strName 
         
    
    def reprRulesetStrToHexInt(self, ruleset):
        tempList = []
        tempRepList = []
        
        if ruleset != '': 
            upRuleset = ruleset.upper()
            upRuleset =  upRuleset.replace("ON", ','+str(E_RULE_COND_ON)+',')
            upRuleset =  upRuleset.replace("OFF", ','+str(E_RULE_COND_OFF)+',')
            upRuleset =  upRuleset.replace("AND", ','+str(E_RULE_COND_AND)+',')
            upRuleset =  upRuleset.replace("OR", ','+str(E_RULE_COND_OR)+',')
           
            strlen = len(upRuleset)
            upRuleset = upRuleset[1:strlen]
            tempList = re.split(',', upRuleset)

            for i in range(len(tempList)):
                tempRepList.append(self.convert_long_to_bytes(int(tempList[i]), 'little', 'no', 'yes'))
            
            for j in range(0, DEF_LM_PARAM_MAX_SZ-len(tempList)):
                tempRepList.append(self.convert_long_to_bytes(int(0), 'little', 'no', 'yes'))
             
            strTargetList = "".join(tempRepList)
            return (strTargetList, len(tempList)/2)
       
        else:
            for j in range(0, DEF_LM_PARAM_MAX_SZ):
                tempRepList.append(self.convert_long_to_bytes(int(0), 'little', 'no', 'yes'))
                tempRepList.append(self.convert_long_to_bytes(int(-1), 'little', 'no', 'yes'))
              
            strTargetList = "".join(tempRepList)
            return (strTargetList, 0)    
    
    ########################################################################
    
    def reprAttrIntToStr(self, num):
        if   num == E_RULE_ATT_NONE            : return "NONE"
        elif num == E_RULE_ATT_CALLRING_DOMAIN : return "CALLRING_DOMAIN"
        elif num == E_RULE_ATT_CALLER_DOMAIN   : return "CALLER_DOMAIN"
        elif num == E_RULE_ATT_CALLED_DOMAIN   : return "CALLED_DOMAIN"
        elif num == E_RULE_ATT_CALLER_PREFIX   : return "CALLER_PREFIX"
        elif num == E_RULE_ATT_CALLED_PREFIX   : return "CALLED_PREFIX"
        elif num == E_RULE_ATT_CALLER_REALM    : return "CALLER_REALM"
        elif num == E_RULE_ATT_CALLED_REALM    : return "CALLED_REALM"
        elif num == E_RULE_ATT_HEADER_NAME     : return "HEADER_NAME"
        elif num == E_RULE_ATT_HEADER_VALUE    : return "HEADER_VALUE"
        elif num == E_RULE_ATT_RECV_LOC        : return "RECV_LOC"
        elif num == E_RULE_ATT_REQUEST         : return "REQUEST"
        elif num == E_RULE_ATT_RESPONSE_MC     : return "RESPONSE_MC"
        elif num == E_RULE_ATT_HEADER_GENVALUE : return "HEADER_GENVALUE"
        elif num == E_RULE_ATT_DISPLAY_NAME    : return "DISPLAY_NAME"
        elif num == E_RULE_ATT_URI_GEN_VALUE   : return "URI_GEN_VALUE"
        elif num == E_RULE_ATT_URI_GEN_HEADER  : return "URI_GEN_HEADER"
        elif num == E_RULE_ATT_URI_USERNAME    : return "URI_USERNAME"
        elif num == E_RULE_ATT_HOST            : return "URI_HOST"
        elif num == E_RULE_ATT_URI_REALM       : return "URI_REALM"
        elif num == E_RULE_ATT_URI_PORT        : return "URI_PORT"
        elif num == E_RULE_ATT_URI_SCHEME      : return "URI_SCHEME"
        elif num == E_RULE_ATT_URI_STRING      : return "URI_STRING"
        elif num == E_RULE_ATT_EXT_HDR_GEN     : return "EXT_HDR_GEN"
        elif num == E_RULE_ATT_URI_SUB_VALUE   : return "URI_SUB_VALUE"
        elif num == E_RULE_ATT_RULE_GROUP      : return "RULE_GROUP"
        elif num == E_RULE_ATT_MATCH_LOC_ID    : return "MATCH_LOC_ID"
        elif num == E_RULE_ATT_MATCH_RMT_ID    : return "MATCH_RMT_ID"
        elif num == E_RULE_ATT_MATCH_RTE_ID    : return "MATCH_RTE_ID"
        elif num == E_RULE_ATT_DIRECTION       : return "DIRECTION"
        elif num == E_RULE_ATT_NPDB_RESULT     : return "NPDB_RESULT"
        elif num == E_RULE_ATT_IGW_RESULT      : return "IGW_RESULT"
        elif num == E_RULE_ATT_POINT_CODE      : return "POINT_CODE"
        elif num == E_RULE_ATT_HEADER_VALUE_BIT      : return "HEADER_VALUE_BIT"
        else: return "UNKNOWN"

    def reprAttrStrToInt(self, strName):
        if   strName == "NONE"            : return E_RULE_ATT_NONE
        elif strName == "CALLRING_DOMAIN" : return E_RULE_ATT_CALLRING_DOMAIN
        elif strName == "CALLER_DOMAIN"   : return E_RULE_ATT_CALLER_DOMAIN
        elif strName == "CALLED_DOMAIN"   : return E_RULE_ATT_CALLED_DOMAIN
        elif strName == "CALLER_PREFIX"   : return E_RULE_ATT_CALLER_PREFIX
        elif strName == "CALLED_PREFIX"   : return E_RULE_ATT_CALLED_PREFIX
        elif strName == "CALLER_REALM"    : return E_RULE_ATT_CALLER_REALM
        elif strName == "CALLED_REALM"    : return E_RULE_ATT_CALLED_REALM
        elif strName == "HEADER_NAME"     : return E_RULE_ATT_HEADER_NAME
        elif strName == "HEADER_VALUE"    : return E_RULE_ATT_HEADER_VALUE
        elif strName == "RECV_LOC"        : return E_RULE_ATT_RECV_LOC
        elif strName == "REQUEST"         : return E_RULE_ATT_REQUEST
        elif strName == "RESPONSE_MC"     : return E_RULE_ATT_RESPONSE_MC
        elif strName == "HEADER_GENVALUE" : return E_RULE_ATT_HEADER_GENVALUE
        elif strName == "DISPLAY_NAME"    : return E_RULE_ATT_DISPLAY_NAME
        elif strName == "URI_GEN_VALUE"   : return E_RULE_ATT_URI_GEN_VALUE
        elif strName == "URI_GEN_HEADER"  : return E_RULE_ATT_URI_GEN_HEADER
        elif strName == "URI_USERNAME"    : return E_RULE_ATT_URI_USERNAME
        elif strName == "URI_HOST"        : return E_RULE_ATT_HOST
        elif strName == "URI_REALM"       : return E_RULE_ATT_URI_REALM
        elif strName == "URI_PORT"        : return E_RULE_ATT_URI_PORT
        elif strName == "URI_SCHEME"      : return E_RULE_ATT_URI_SCHEME
        elif strName == "URI_STRING"      : return E_RULE_ATT_URI_STRING
        elif strName == "EXT_HDR_GEN"     : return E_RULE_ATT_EXT_HDR_GEN
        elif strName == "URI_SUB_VALUE"   : return E_RULE_ATT_URI_SUB_VALUE
        elif strName == "RULE_GROUP"      : return E_RULE_ATT_RULE_GROUP
        elif strName == "MATCH_LOC_ID"    : return E_RULE_ATT_MATCH_LOC_ID
        elif strName == "MATCH_RMT_ID"    : return E_RULE_ATT_MATCH_RMT_ID
        elif strName == "MATCH_RTE_ID"    : return E_RULE_ATT_MATCH_RTE_ID
        elif strName == "DIRECTION"       : return E_RULE_ATT_DIRECTION
        elif strName == "NPDB_RESULT"     : return E_RULE_ATT_NPDB_RESULT
        elif strName == "IGW_RESULT"      : return E_RULE_ATT_IGW_RESULT
        elif strName == "POINT_CODE"      : return E_RULE_ATT_POINT_CODE
        elif strName == "HEADER_VALUE_BIT"      : return E_RULE_ATT_HEADER_VALUE_BIT
        else: return -1
   
    ########################################################################

    def reprPosIntToStr(self, pos):
        if   pos == E_MSG_POS_NONE         : return "NONE"
        elif pos == E_MSG_POS_ALL          : return "ALL"
        elif pos == E_MSG_POS_EXCEPT_FIRST : return "EXCEPT_FIRST"
        elif pos == E_MSG_POS_EXCEPT_LAST  : return "EXCEPT_LAST"
        elif pos == E_MSG_POS_ONLY_FIRST   : return "ONLY_FIRST"
        elif pos == E_MSG_POS_ONLY_LAST    : return "ONLY_LAST"
        elif pos == E_MSG_POS_DEPEND_RULE  : return "DEPEND_RULE"
        elif pos == E_MSG_POS_SHIFT_UP     : return "SHIFT_UP"
        elif pos == E_MSG_POS_SHIFT_DOWN   : return "SHIFT_DOWN"
        elif pos == E_MSG_POS_ORDER        : return "ORDER"
        else: return "UNKNOWN"

    def reprPosStrToInt(self, pos):
        if   pos == "NONE"         : return E_MSG_POS_NONE
        elif pos == "ALL"          : return E_MSG_POS_ALL
        elif pos == "EXCEPT_FIRST" : return E_MSG_POS_EXCEPT_FIRST
        elif pos == "EXCEPT_LAST"  : return E_MSG_POS_EXCEPT_LAST
        elif pos == "ONLY_FIRST"   : return E_MSG_POS_ONLY_FIRST
        elif pos == "ONLY_LAST"    : return E_MSG_POS_ONLY_LAST
        elif pos == "DEPEND_RULE"  : return E_MSG_POS_DEPEND_RULE
        elif pos == "SHIFT_UP"     : return E_MSG_POS_SHIFT_UP
        elif pos == "SHIFT_DOWN"   : return E_MSG_POS_SHIFT_DOWN
        elif pos == "ORDER"        : return E_MSG_POS_ORDER
        else: return -1

    ########################################################################

    def reprMatchIntToStr(self, match):
        if   match == E_RULE_MATCH_NONE : return "NONE"
        elif match == E_RULE_MATCH_FULL : return "FULL"
        elif match == E_RULE_MATCH_PART : return "PART"
        elif match == E_RULE_MATCH_NUM  : return "NUM"
        elif match == E_RULE_MATCH_SEQ  : return "SEQ"
        else: return "UNKNOWN" 
    
    def reprMatchStrToInt(self, match):
        if   match == "NONE" : return E_RULE_MATCH_NONE
        elif match == "FULL" : return E_RULE_MATCH_FULL
        elif match == "PART" : return E_RULE_MATCH_PART
        elif match == "NUM"  : return E_RULE_MATCH_NUM
        elif match == "SEQ"  : return E_RULE_MATCH_SEQ
        else: return -1
    
    ########################################################################
    
    def reprSaveIntToStr(self, save):
        if   save == E_RULE_SAVE_NON        : return "NONE"
        elif save == E_RULE_SAVE_NOT        : return "NOT_SAVE"
        elif save == E_RULE_SAVE_VALUE1     : return "VALUE1"
        elif save == E_RULE_SAVE_VALUE2     : return "VALUE2"
        elif save == E_RULE_SAVE_VALUE3     : return "VALUE3"
        elif save == E_RULE_SAVE_POS        : return "POS"
        elif save == E_RULE_SAVE_VALUE_INST : return "VALUE_INST"
        else : return "UNKNOWN"
 
    def reprSaveStrToInt(self, save):
        if   save == "NONE"       : return E_RULE_SAVE_NON
        elif save == "NOT_SAVE"   : return E_RULE_SAVE_NOT
        elif save == "VALUE1"     : return E_RULE_SAVE_VALUE1
        elif save == "VALUE2"     : return E_RULE_SAVE_VALUE2
        elif save == "VALUE3"     : return E_RULE_SAVE_VALUE3
        elif save == "POS"        : return E_RULE_SAVE_POS
        elif save == "VALUE_INST" : return E_RULE_SAVE_VALUE_INST
        else: return -1
    
    ########################################################################

    def reprRteopTypeIntToStr(self, type):
        if   type == E_ROUTE_OP_RSEQ : return "RSEQ"
        elif type == E_ROUTE_OP_SSEQ : return "SSEQ"
        else: return "UNKNOWN"
        
    def reprRteopTypeStrToInt(self, type):
        if   type == "RSEQ"  : return E_ROUTE_OP_RSEQ
        elif type == "SSEQ"  : return E_ROUTE_OP_SSEQ
        else : return -1
        
    ########################################################################
    
    def reprRteOpHexIntToIntAry(self, serviceops): 
        tempList = []
        nCnt = 0
        for i in range(len(serviceops)):
            if i % 4 == 0:
                if i == (DEF_LM_PARAM_MAX_SZ*4)-1:
                    break
                else:
                    byte_end = serviceops[i]
                    byte_m2 = serviceops[i + 1]
                    byte_m1 = serviceops[i + 2]
                    byte_begin = serviceops[i + 3]
                    
                    byte_total = byte_begin + byte_m1 + byte_m2 + byte_end
                    
                    rep_byte_total = int(byte_total.encode("hex"), 16)
                    
                    if rep_byte_total != 0:
                        rep_name = str(rep_byte_total)
                        tempList.append(rep_name)
                    else:
                        '''
                        1 : Src Screen OPS
                        2 : Dst Screen OPS
                        3 : Filter OPS
                        '''
                        if((nCnt == 1) or (nCnt == 2) or (nCnt == 3)):
                            rep_name = str(rep_byte_total)
                            tempList.append(rep_name)        
                        pass
                    
                    nCnt = nCnt + 1
            else:
                pass

        return tempList

    def reprRteOpIntAryToHexInt(self, value_1, value_2, value_3):
        tempList = []
        tempRepList = []
        
        tempList.append(0)
        tempList.append(value_1)
        tempList.append(value_2)
        tempList.append(value_3)

        for i in range(len(tempList)):
            tempRepList.append(self.convert_long_to_bytes(int(tempList[i]), 'little', 'no', 'yes'))
            
        for j in range(0, DEF_LM_PARAM_MAX_SZ-len(tempList)):
            tempRepList.append(self.convert_long_to_bytes(int(0), 'little', 'no', 'yes'))
             
        strTargetList = "".join(tempRepList)
        return strTargetList

    ########################################################################
    
    def reprScrOpsHexIntToIntAry(self, serviceops):
        tempList = []
        for i in range(len(serviceops)):
            if i % 4 == 0:
                if i == (DEF_LM_PARAM_MAX_SZ*4)-1:
                    break
                else:
                    byte_end = serviceops[i]
                    byte_m2 = serviceops[i + 1]
                    byte_m1 = serviceops[i + 2]
                    byte_begin = serviceops[i + 3]
                    
                    byte_total = byte_begin + byte_m1 + byte_m2 + byte_end
                    
                    rep_byte_total = int(byte_total.encode("hex"), 16)
                    
                    if rep_byte_total != 0:
                        rep_name = str(rep_byte_total)
                        tempList.append("/")
                        tempList.append(rep_name)
                    else:
                        pass
            else:
                pass
        
        tempList.remove("/")
        return tempList
    
    def reprScrOpsStrToIntAry(self, opids):
        tempList = []
        tempRepList = []
        
        if opids != '': 
            upOpids = opids.upper()
            tempStr =  upOpids.replace("/", ",")

            tempList = re.split(',', tempStr)

            for i in range(len(tempList)):
                tempRepList.append(self.convert_long_to_bytes(int(tempList[i]), 'little', 'no', 'yes'))

            for j in range(0, DEF_LM_PARAM_MAX_SZ-len(tempList)):
                tempRepList.append(self.convert_long_to_bytes(int(0), 'little', 'no', 'yes'))

            strTargetList = "".join(tempRepList)
            return (strTargetList, len(tempList))     
       
        else:
            for j in range(0, DEF_LM_PARAM_MAX_SZ):
                tempRepList.append(self.convert_long_to_bytes(int(-1), 'little', 'no', 'yes'))
              
            strTargetList = "".join(tempRepList)
            return (strTargetList, 0)
    
    
    ########################################################################
        
    def reprActIntToStr(self, act):
        if   act == E_SCREEN_ACTION_NONE                : return "NONE"
        elif act == E_SCREEN_ACTION_ADD_HDR_VALUE       : return "ADD_HDR_VALUE"
        elif act == E_SCREEN_ACTION_ADD_HDR_PARAM       : return "ADD_HDR_PARAM"
        elif act == E_SCREEN_ACTION_DEL_HDR_NAME        : return "DEL_HDR_NAME"
        elif act == E_SCREEN_ACTION_DEL_HDR_PARAM       : return "DEL_HDR_PARAM"
        elif act == E_SCREEN_ACTION_CVT_REQ_URI         : return "CVT_REQ_URI"
        elif act == E_SCREEN_ACTION_ADD_URI_GEN_PARAM   : return "ADD_URI_GEN_PARAM"
        elif act == E_SCREEN_ACTION_ADD_URI_HDR_PARAM   : return "ADD_URI_HDR_PARAM"
        elif act == E_SCREEN_ACTION_ADD_URI_SCHEME      : return "ADD_URI_SCHEME"
        elif act == E_SCREEN_ACTION_ADD_URI_USERNAME    : return "ADD_URI_USERNAME"
        elif act == E_SCREEN_ACTION_ADD_URI_HOST        : return "ADD_URI_HOST"
        elif act == E_SCREEN_ACTION_ADD_URI_PORT        : return "ADD_URI_PORT"
        elif act == E_SCREEN_ACTION_ADD_URI_DISPLAYNAME : return "ADD_URI_DISPLAYNAME"
        elif act == E_SCREEN_ACTION_ADD_URI_STRING      : return "ADD_URI_STRING"
        elif act == E_SCREEN_ACTION_DEL_URI_DISPLAYNAME : return "DEL_URI_DISPLAYNAME"
        elif act == E_SCREEN_ACTION_DEL_URI_GEN_PARAM   : return "DEL_URI_GEN_PARAM"
        elif act == E_SCREEN_ACTION_DEL_URI_HDR_PARAM   : return "DEL_URI_HDR_PARAM"
        elif act == E_SCREEN_ACTION_DEL_URI_SCHEME      : return "DEL_URI_SCHEME"
        elif act == E_SCREEN_ACTION_DEL_URI_USERNAME    : return "DEL_URI_USERNAME"
        elif act == E_SCREEN_ACTION_DEL_URI_HOST        : return "DEL_URI_HOST"
        elif act == E_SCREEN_ACTION_DEL_URI_PORT        : return "DEL_URI_PORT"
        elif act == E_SCREEN_ACTION_DEL_URI_STRING      : return "DEL_URI_STRING"
        elif act == E_SCREEN_ACTION_MOV_PARAM           : return "MOV_PARAM"
        elif act == E_SCREEN_ACTION_MOV_URI_PARAM       : return "MOV_URI_PARAM"
        elif act == E_SCREEN_ACTION_MOV_URI_HDR         : return "MOV_URI_HDR"
        elif act == E_SCREEN_ACTION_CVT_RSP             : return "CVT_RSP"
        elif act == E_SCREEN_ACTION_CVT_URI_SCHEME      : return "CVT_URI_SCHEME"
        else: return "UNKNOWN"
        
    def reprActStrToInt(self, act):
        if   act == "NONE"                : return E_SCREEN_ACTION_NONE
        elif act == "ADD_HDR_VALUE"       : return E_SCREEN_ACTION_ADD_HDR_VALUE
        elif act == "ADD_HDR_PARAM"       : return E_SCREEN_ACTION_ADD_HDR_PARAM
        elif act == "DEL_HDR_NAME"        : return E_SCREEN_ACTION_DEL_HDR_NAME
        elif act == "DEL_HDR_PARAM"       : return E_SCREEN_ACTION_DEL_HDR_PARAM
        elif act == "CVT_REQ_URI"         : return E_SCREEN_ACTION_CVT_REQ_URI
        elif act == "ADD_URI_GEN_PARAM"   : return E_SCREEN_ACTION_ADD_URI_GEN_PARAM
        elif act == "ADD_URI_HDR_PARAM"   : return E_SCREEN_ACTION_ADD_URI_HDR_PARAM
        elif act == "ADD_URI_SCHEME"      : return E_SCREEN_ACTION_ADD_URI_SCHEME
        elif act == "ADD_URI_USERNAME"    : return E_SCREEN_ACTION_ADD_URI_USERNAME
        elif act == "ADD_URI_HOST"        : return E_SCREEN_ACTION_ADD_URI_HOST
        elif act == "ADD_URI_PORT"        : return E_SCREEN_ACTION_ADD_URI_PORT
        elif act == "ADD_URI_DISPLAYNAME" : return E_SCREEN_ACTION_ADD_URI_DISPLAYNAME
        elif act == "ADD_URI_STRING"      : return E_SCREEN_ACTION_ADD_URI_STRING
        elif act == "DEL_URI_DISPLAYNAME" : return E_SCREEN_ACTION_DEL_URI_DISPLAYNAME
        elif act == "DEL_URI_GEN_PARAM"   : return E_SCREEN_ACTION_DEL_URI_GEN_PARAM
        elif act == "DEL_URI_HDR_PARAM"   : return E_SCREEN_ACTION_DEL_URI_HDR_PARAM
        elif act == "DEL_URI_SCHEME"      : return E_SCREEN_ACTION_DEL_URI_SCHEME
        elif act == "DEL_URI_USERNAME"    : return E_SCREEN_ACTION_DEL_URI_USERNAME
        elif act == "DEL_URI_HOST"        : return E_SCREEN_ACTION_DEL_URI_HOST
        elif act == "DEL_URI_PORT"        : return E_SCREEN_ACTION_DEL_URI_PORT
        elif act == "DEL_URI_STRING"      : return E_SCREEN_ACTION_DEL_URI_STRING
        elif act == "MOV_PARAM"           : return E_SCREEN_ACTION_MOV_PARAM
        elif act == "MOV_URI_PARAM"       : return E_SCREEN_ACTION_MOV_URI_PARAM
        elif act == "MOV_URI_HDR"         : return E_SCREEN_ACTION_MOV_URI_HDR
        elif act == "CVT_RSP"             : return E_SCREEN_ACTION_CVT_RSP
        elif act == "CVT_URI_SCHEME"      : return E_SCREEN_ACTION_CVT_URI_SCHEME
        else: return -1

    ########################################################################
    
    def reprFilterActIntToStr(self, attr):
        if   attr == E_FILTER_ACT_NONE     : return "NONE"
        elif attr == E_FILTER_ACT_DENY     : return "DENY"
        elif attr == E_FILTER_ACT_DISCARD  : return "DISCARD"
        else: return "UNKNOWN"
    
    def reprFilterActStrToInt(self, attr):    
        if   attr == "NONE"     : return E_FILTER_ACT_NONE
        elif attr == "DENY"     : return E_FILTER_ACT_DENY
        elif attr == "DISCARD"  : return E_FILTER_ACT_DISCARD
        else: return -1
    
    ########################################################################
    
    def reprRcCodeHexIntToIntAry(self, code): 
        tempList = []
        for i in range(len(code)):
            if i % 4 == 0:
                if i == (E_CAUSE_MAX*4)-1:
                    break
                else:
                    byte_end = code[i]
                    byte_m2 = code[i + 1]
                    byte_m1 = code[i + 2]
                    byte_begin = code[i + 3]
                    
                    byte_total = byte_begin + byte_m1 + byte_m2 + byte_end
                    
                    rep_byte_total = int(byte_total.encode("hex"), 16)
                    '''
                    if rep_byte_total != 0:
                        rep_name = str(rep_byte_total)
                        tempList.append(rep_name)
                    else:
                        pass
                    '''  
                    rep_name = str(rep_byte_total)
                    tempList.append(rep_name)                      
            else:
                pass

        return tempList
    
    ########################################################################
    
    def reprRcTextHexToAry(self, text):
        tempList = []
        cnt = 0
        
        for i in range(len(text)):
            if i == (E_CAUSE_MAX*DEF_RTE_MAXLEN_STRIUNAVAIL)-1:
                break
            else:
                if i % DEF_RTE_MAXLEN_STRIUNAVAIL == 0:
                    if cnt == 0:
                        fromc = 0
                        toc = DEF_RTE_MAXLEN_STRIUNAVAIL
                    else:
                        fromc = DEF_RTE_MAXLEN_STRIUNAVAIL * cnt
                        toc = DEF_RTE_MAXLEN_STRIUNAVAIL * (cnt+1) 
                            
                    cnt = cnt+1
                    rep_name = text[fromc:toc]
                    
                    tempList.append(self.reprName(rep_name))
                else:
                    pass

        return tempList
    
    def reprRcTextToAry(self, text):
        tempList = []
        tempRepList = []
        arrTextList = []

        tempStr =  text.replace("/", ",")
        tempList = re.split(',', tempStr)

        for i in range(len(tempList)):

            arrTextList.append([])
            strText = tempList[i]
            
            for j in strText:
                arrTextList[i].append(j)
            
            for k in range(0, DEF_RTE_MAXLEN_STRIUNAVAIL-len(strText)):
                arrTextList[i].append("\x00")    
        
        strTargetList = "".join(str(item) for innerlist in arrTextList for item in innerlist)
        return strTargetList

    ########################################################################
    
    def reprMsgCtlIntToStr(self, ctl):
        if   ctl == E_MAXMSG_CTRL_NOTTHING  : return "CTRL_NOTTHING"
        elif ctl == E_MAXMSG_DROP           : return "DROP"
        elif ctl == E_MAXMSG_RSP_ERROR      : return "RSP_ERROR"
        elif ctl == E_MAXMSG_CTRL_RELAY_TCP : return "CTRL_RELAY_TCP"
        else : return "UNKNOWN"
        
    def reprMsgCtlStrToint(self, ctl):
        if   ctl == "CTRL_NOTTHING"  : return E_MAXMSG_CTRL_NOTTHING
        elif ctl == "DROP"           : return E_MAXMSG_DROP
        elif ctl == "RSP_ERROR"      : return E_MAXMSG_RSP_ERROR
        elif ctl == "CTRL_RELAY_TCP" : return E_MAXMSG_CTRL_RELAY_TCP
        else : return -1
    
    ########################################################################

    def reprActDeactSTrToInt(self, opt):
        if   opt == "ACT"          : return 0
        elif opt == "DEACT"        : return 0
        elif opt == "ACT+BYPASS"   : return 1
        elif opt == "DEACT+BYPASS" : return 1
        else : return -1

    ########################################################################

    def reprCodecTypeIntToStr(self, type):
        if   type == 1 : return "AUDIO"
        elif type == 2 : return "VIDEO"
        else : return "UNKNOWN"

    def reprCodecTypeStrToInt(self, type):
        if   type == "AUDIO": return 1
        elif type == "VIDEO": return 2
        else: return 0

    def reprDtmfIntToStr(self, dtmf):
        if   dtmf == 0 : return "FALSE"
        elif dtmf == 1 : return "TRUE"
        else : return "UNKNOWN"

    def reprDtmfStrToInt(self, dtmf):
        if   dtmf == "FALSE" : return 0
        elif dtmf == "TRUE"  : return 1
        else: return 0
        
    ########################################################################
    
    def reprTypeIntToStr(self, type):
        if   type == E_RULE_TYPE_ADD: return "ADD"
        elif type == E_RULE_TYPE_MOD: return "MOD"
        elif type == E_RULE_TYPE_DEL: return "DEL"
        else: return "UNKNOWN"
        
    def reprTypeStrToInt(self, type):
        if   type == "ADD" : return E_RULE_TYPE_ADD
        elif type == "MOD" : return E_RULE_TYPE_MOD
        elif type == "DEL" : return E_RULE_TYPE_DEL
        else: return 0        

    def reprChgTypeIntToStr(self, type):
        if   type == E_CHG_TYPE_PT   : return "PT"
        elif type == E_CHG_TYPE_FMTP : return "FMTP"
        elif type == E_CHG_TYPE_RATE : return "RATE"
        elif type == E_CHG_TYPE_FS   : return "FS"
        else: return "NONE"
        
    def reprChgTypeStrToInt(self, type):
        if type == "NONE"   : return 0
        elif type == "PT"   : return E_CHG_TYPE_PT
        elif type == "FMTP" : return E_CHG_TYPE_FMTP
        elif type == "RATE" : return E_CHG_TYPE_RATE
        elif type == "FS"   : return E_CHG_TYPE_FS
        else: return 0        
        
    ########################################################################
    
    def reprCommIntToStr(self, type):
        if   type == E_MANIPULATION_TYPE_ADD: return "ADD"
        elif type == E_MANIPULATION_TYPE_MOD: return "MOD"
        elif type == E_MANIPULATION_TYPE_MOD: return "DEL"
        else: return "UNKNOWN"
        
    def reprCommStrToInt(self, type):
        if   type == "ADD": return E_MANIPULATION_TYPE_ADD
        elif type == "MOD": return E_MANIPULATION_TYPE_MOD
        elif type == "DEL": return E_MANIPULATION_TYPE_DEL
        else: return 0

    def reprMediaIntToStr(self, type):
        if   type == E_SDP_TYPE_AUDIO: return "AUDIO"
        elif type == E_SDP_TYPE_VIDEO: return "VIDEO"
        else: return "UNKNOWN"

    def reprMediaStrToInt(self, type):
        if   type == "AUDIO": return E_SDP_TYPE_AUDIO
        elif type == "VIDEO": return E_SDP_TYPE_VIDEO
        else: return 0
        
    ########################################################################
    
    def reprCodecMatchIntToStr(self, type):
        if   type == E_SDP_FULL_MACHING:    return "FULL"
        elif type == E_SDP_PARTIAL_MACHING: return "PARTIAL"
        elif type == E_SDP_PREFIX_MACHING:  return "PREFIX"
        else: return "NONE"
        
    def reprCodecMatchStrToInt(self, type):
        if   type == "FULL"    : return E_SDP_FULL_MACHING
        elif type == "PARTIAL" : return E_SDP_PARTIAL_MACHING
        elif type == "PREFIX"  : return E_SDP_PREFIX_MACHING
        else: return 0        

    def reprCondIntToStr(self, type):
        if   type == E_SDP_CONDITION_INCLUDE: return "INCLUDE"
        elif type == E_SDP_CONDITION_EXCLUDE: return "EXCLUDE"
        else: return "NONE"

    def reprCondStrToInt(self, type):
        if   type == "INCLUDE": return E_SDP_CONDITION_INCLUDE
        elif type == "EXCLUDE": return E_SDP_CONDITION_EXCLUDE
        else: return 0
        
    ########################################################################   
    
    def reprTgRteTypeIntToStr(self, type):
        if   type == 0 : return "OTHER"
        elif type == 1 : return "MINE"
        else: return "NONE"

    def reprTgRteTypeToStrToInt(self, type):
        if   type == "MINE"  : return 1
        elif type == "OTHER" : return 0
        else: return "UNKNOWN"
        
    def reprTgRteIpverIntToStr(self, ver):
        strVer = ''
        if   ver == 4: strVer = "IPv4"
        elif ver == 6: strVer = "IPv6"
        elif ver == 0: strVer = "RecvDefault"
        else: strVer = "NONE"
        return strVer

    def reprTgRteIpTypeStrToInt(self, type):
        if   type == "IP4" : return 4
        elif type == "IP6" : return 6
        elif type == "RECV_DEFAULT" : return 0
        else: return -1
        
    def reprTgEncTypeIntToStr(self, enctype):
        if   enctype == 0 : return "OFF"
        elif enctype == 1 : return "AES"
        elif enctype == 2 : return "ARIA"
        else: return "UNKNOWN"

    def reprTgEncTypeStrToInt(self, type):
        if   type == "OFF"  : return 0
        elif type == "AES"  : return 1
        elif type == "ARIA" : return 2
        else: return 0          
           
    def reprStatusIntToStr(self, status):
        strSts = ''

        if status == e_tga_status_ok:
            strSts = "NORMAL"
        else:
            if status & e_tga_status_block:
                if str(strSts): strSts += " & "
                strSts += "BLK"

            if status & e_tga_status_ng:
                if str(strSts): strSts += " & "
                strSts += "NG"

            if status & e_tga_status_connect_fail:
                if str(strSts): strSts += " & "
                strSts += "CONN_FAIL"

            if status & e_tga_status_not_active:
                if str(strSts): strSts += " & "
                strSts += "NOT_ACTIVE"

            if status & e_tga_status_hw_fail:
                if str(strSts): strSts += " & "
                strSts += "HW_FAIL"

            if status & e_tga_status_nic_fail:
                if str(strSts): strSts += " & "
                strSts += "NIC_FAIL"

            if status & e_tga_status_init_fail:
                if str(strSts): strSts += " & "
                strSts += "INIT_FAIL"

        return strSts            
    ########################################################################                
    
